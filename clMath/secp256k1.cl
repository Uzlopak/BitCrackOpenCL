#ifndef SECP256K1_CL
#define SECP256K1_CL

typedef struct uint256_t {
    unsigned int v[8];
} uint256_t;

/**
 * Prime modulus 2^256 - 2^32 - 977
 */
__constant unsigned int P[8] = {
    0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFE, 0xFFFFFC2F
};

#ifdef DEVICE_VENDOR_INTEL
// Intel devices have a mul_hi bug
inline unsigned int mul_hi977(unsigned int x)
{
    unsigned int high = x >> 16;
    unsigned int low = x & 0xffff;

    return (((low * 977) >> 16) + (high * 977)) >> 16;
}

// 32 x 32 multiply-add
inline void madd977(unsigned int *high, unsigned int *low, unsigned int *a, unsigned int *c)
{
    *low = *a * 977;
    unsigned int tmp = *low + *c;
    unsigned int carry = tmp < *low ? 1 : 0;
    *low = tmp;
    *high = mul_hi977(*a) + carry;
}
#else

inline void madd977(unsigned int *high, unsigned int *low, unsigned int *a, unsigned int *c)
{
    *low = *a * 977;
    __private unsigned int tmp = *low + *c;
    __private unsigned int carry = tmp < *low ? 1 : 0;
    *low = tmp;
    *high = mad_hi(*a, (unsigned int)977, carry);
}

#endif

// Add with carry
#define addc(a, b, sum, carry, tmp)      \
    sum = (a) + (carry);                 \
    tmp = ((sum) < (a)) * 1;             \
    sum = (sum) + (b);                   \
    carry = (tmp) | (((sum) < (b)) * 1);

// subtract with borrow
#define subc(a, b, diff, borrow, tmp)    \
    tmp = (a) - (borrow);                \
    borrow = ((tmp) > (a)) * 1;          \
    diff = (tmp) - (b);                  \
    borrow |= ((diff) > (tmp)) ? 1 : 0;

#define add256k(a, b, c, carry, tmp)    \
    carry = 0;                          \
    addc(a[7], b[7], c[7], carry, tmp); \
    addc(a[6], b[6], c[6], carry, tmp); \
    addc(a[5], b[5], c[5], carry, tmp); \
    addc(a[4], b[4], c[4], carry, tmp); \
    addc(a[3], b[3], c[3], carry, tmp); \
    addc(a[2], b[2], c[2], carry, tmp); \
    addc(a[1], b[1], c[1], carry, tmp); \
    addc(a[0], b[0], c[0], carry, tmp);

#define sub256k( a, b, c, borrow, tmp)   \
    borrow = 0;                          \
    subc(a[7], b[7], c[7], borrow, tmp); \
    subc(a[6], b[6], c[6], borrow, tmp); \
    subc(a[5], b[5], c[5], borrow, tmp); \
    subc(a[4], b[4], c[4], borrow, tmp); \
    subc(a[3], b[3], c[3], borrow, tmp); \
    subc(a[2], b[2], c[2], borrow, tmp); \
    subc(a[1], b[1], c[1], borrow, tmp); \
    subc(a[0], b[0], c[0], borrow, tmp);

#define isInfinity256k(a)        \
    (                           \
        (a[0] == 0xffffffff) && \
        (a[1] == 0xffffffff) && \
        (a[2] == 0xffffffff) && \
        (a[3] == 0xffffffff) && \
        (a[4] == 0xffffffff) && \
        (a[5] == 0xffffffff) && \
        (a[6] == 0xffffffff) && \
        (a[7] == 0xffffffff)    \
    )

#define greaterOrEqualToP(a)    \
    (                           \
        (a[0] == 0xffffffff) && \
        (a[1] == 0xffffffff) && \
        (a[2] == 0xffffffff) && \
        (a[3] == 0xffffffff) && \
        (a[4] == 0xffffffff) && \
        (a[5] == 0xffffffff) && \
        (a[6] >= 0xfffffffe) && \
        (a[7] >= 0xfffffc2f)    \
    )

#define equal256k(a, b)   \
    (                     \
        (a[0] == b[0]) && \
        (a[1] == b[1]) && \
        (a[2] == b[2]) && \
        (a[3] == b[3]) && \
        (a[4] == b[4]) && \
        (a[5] == b[5]) && \
        (a[6] == b[6]) && \
        (a[7] == b[7])    \
    )

#define modP256k(a, carry, tmp)        \
    if (greaterOrEqualToP(a)) {        \
        sub256k(a, P, a, carry, tmp);  \
    }

void multiply256k(__private const unsigned int x[8], __private const unsigned int y[8], __private unsigned int out_high[8], __private unsigned int out_low[8])
{
    __private unsigned long product;

    // First round, overwrite z
    product = (unsigned long)x[7] * y[7];
    out_low[7] = (unsigned int)product;
    
    product = (unsigned long)x[7] * y[6] + (unsigned int)(product >> 32);
    out_low[6] = (unsigned int)product;
    
    product = (unsigned long)x[7] * y[5] + (unsigned int)(product >> 32);
    out_low[5] = (unsigned int)product;
    
    product = (unsigned long)x[7] * y[4] + (unsigned int)(product >> 32);
    out_low[4] = (unsigned int)product;
    
    product = (unsigned long)x[7] * y[3] + (unsigned int)(product >> 32);
    out_low[3] = (unsigned int)product;
    
    product = (unsigned long)x[7] * y[2] + (unsigned int)(product >> 32);
    out_low[2] = (unsigned int)product;
        
    product = (unsigned long)x[7] * y[1] + (unsigned int)(product >> 32);
    out_low[1] = (unsigned int)product;
        
    product = (unsigned long)x[7] * y[0] + (unsigned int)(product >> 32);
    out_low[0] = (unsigned int)product;
    out_high[7] = (unsigned int)(product >> 32);

    product = (unsigned long)x[6] * y[7] + out_low[6];
    out_low[6] = (unsigned int)product;

    /** round6 */
    product = (unsigned long)x[6] * y[6] + out_low[5] + (product >> 32);
    out_low[5] = (unsigned int)product;

    product = (unsigned long)x[6] * y[5] + out_low[4] + (product >> 32);
    out_low[4] = (unsigned int)product;

    product = (unsigned long)x[6] * y[4] + out_low[3] + (product >> 32);
    out_low[3] = (unsigned int)product;

    product = (unsigned long)x[6] * y[3] + out_low[2] + (product >> 32);
    out_low[2] = (unsigned int)product;

    product = (unsigned long)x[6] * y[2] + out_low[1] + (product >> 32);
    out_low[1] = (unsigned int)product;
    
    product = (unsigned long)x[6] * y[1] + out_low[0] + (product >> 32);
    out_low[0] = (unsigned int)product;
    
    product = (unsigned long)x[6] * y[0] + out_high[7] + (product >> 32);
    out_high[7] = (unsigned int)product;
    out_high[6] = product >> 32;

    /** round 5 */
    product = (unsigned long)x[5] * y[7] + out_low[5];
    out_low[5] = (unsigned int)product;

    product = (unsigned long)x[5] * y[6] + out_low[4] + (product >> 32);
    out_low[4] = (unsigned int)product;

    product = (unsigned long)x[5] * y[5] + out_low[3] + (product >> 32);
    out_low[3] = (unsigned int)product;

    product = (unsigned long)x[5] * y[4] + out_low[2] + (product >> 32);
    out_low[2] = (unsigned int)product;

    product = (unsigned long)x[5] * y[3] + out_low[1] + (product >> 32);
    out_low[1] = (unsigned int)product;

    product = (unsigned long)x[5] * y[2] + out_low[0] + (product >> 32);
    out_low[0] = (unsigned int)product;
    
    product = (unsigned long)x[5] * y[1] + out_high[7] + (product >> 32);
    out_high[7] = (unsigned int)product;
    
    product = (unsigned long)x[5] * y[0] + out_high[6] + (product >> 32);
    out_high[6] = (unsigned int)product;
    out_high[5] = product >> 32;

    /** round 4 */
    product = (unsigned long)x[4] * y[7] + out_low[4];
    out_low[4] = (unsigned int)product;

    product = (unsigned long)x[4] * y[6] + out_low[3] + (product >> 32);
    out_low[3] = (unsigned int)product;

    product = (unsigned long)x[4] * y[5] + out_low[2] + (product >> 32);
    out_low[2] = (unsigned int)product;

    product = (unsigned long)x[4] * y[4] + out_low[1] + (product >> 32);
    out_low[1] = (unsigned int)product;

    product = (unsigned long)x[4] * y[3] + out_low[0] + (product >> 32);
    out_low[0] = (unsigned int)product;

    product = (unsigned long)x[4] * y[2] + out_high[7] + (product >> 32);
    out_high[7] = (unsigned int)product;
    
    product = (unsigned long)x[4] * y[1] + out_high[6] + (product >> 32);
    out_high[6] = (unsigned int)product;
    
    product = (unsigned long)x[4] * y[0] + out_high[5] + (product >> 32);
    out_high[5] = (unsigned int)product;
    out_high[4] = product >> 32;

    /** round 3 */
    product = (unsigned long)x[3] * y[7] + out_low[3];
    out_low[3] = (unsigned int)product;

    product = (unsigned long)x[3] * y[6] + out_low[2] + (product >> 32);
    out_low[2] = (unsigned int)product;

    product = (unsigned long)x[3] * y[5] + out_low[1] + (product >> 32);
    out_low[1] = (unsigned int)product;

    product = (unsigned long)x[3] * y[4] + out_low[0] + (product >> 32);
    out_low[0] = (unsigned int)product;

    product = (unsigned long)x[3] * y[3] + out_high[7] + (product >> 32);
    out_high[7] = (unsigned int)product;

    product = (unsigned long)x[3] * y[2] + out_high[6] + (product >> 32);
    out_high[6] = (unsigned int)product;
    
    product = (unsigned long)x[3] * y[1] + out_high[5] + (product >> 32);
    out_high[5] = (unsigned int)product;
    
    product = (unsigned long)x[3] * y[0] + out_high[4] + (product >> 32);
    out_high[4] = (unsigned int)product;
    out_high[3] = product >> 32;

    /** round 2 */
    product = (unsigned long)x[2] * y[7] + out_low[2];
    out_low[2] = (unsigned int)product;

    product = (unsigned long)x[2] * y[6] + out_low[1] + (product >> 32);
    out_low[1] = (unsigned int)product;

    product = (unsigned long)x[2] * y[5] + out_low[0] + (product >> 32);
    out_low[0] = (unsigned int)product;

    product = (unsigned long)x[2] * y[4] + out_high[7] + (product >> 32);
    out_high[7] = (unsigned int)product;

    product = (unsigned long)x[2] * y[3] + out_high[6] + (product >> 32);
    out_high[6] = (unsigned int)product;

    product = (unsigned long)x[2] * y[2] + out_high[5] + (product >> 32);
    out_high[5] = (unsigned int)product;
    
    product = (unsigned long)x[2] * y[1] + out_high[4] + (product >> 32);
    out_high[4] = (unsigned int)product;
    
    product = (unsigned long)x[2] * y[0] + out_high[3] + (product >> 32);
    out_high[3] = (unsigned int)product;
    out_high[2] = product >> 32;
    
    /** round 1 */
    product = (unsigned long)x[1] * y[7] + out_low[1];
    out_low[1] = (unsigned int)product;

    product = (unsigned long)x[1] * y[6] + out_low[0] + (product >> 32);
    out_low[0] = (unsigned int)product;

    product = (unsigned long)x[1] * y[5] + out_high[7] + (product >> 32);
    out_high[7] = (unsigned int)product;

    product = (unsigned long)x[1] * y[4] + out_high[6] + (product >> 32);
    out_high[6] = (unsigned int)product;

    product = (unsigned long)x[1] * y[3] + out_high[5] + (product >> 32);
    out_high[5] = (unsigned int)product;

    product = (unsigned long)x[1] * y[2] + out_high[4] + (product >> 32);
    out_high[4] = (unsigned int)product;
    
    product = (unsigned long)x[1] * y[1] + out_high[3] + (product >> 32);
    out_high[3] = (unsigned int)product;
    
    product = (unsigned long)x[1] * y[0] + out_high[2] + (product >> 32);
    out_high[2] = (unsigned int)product;
    out_high[1] = product >> 32;

    /** round 0 */
    product = (unsigned long)x[0] * y[7] + out_low[0];
    out_low[0] = (unsigned int)product;

    product = (unsigned long)x[0] * y[6] + out_high[7] + (product >> 32);
    out_high[7] = (unsigned int)product;

    product = (unsigned long)x[0] * y[5] + out_high[6] + (product >> 32);
    out_high[6] = (unsigned int)product;

    product = (unsigned long)x[0] * y[4] + out_high[5] + (product >> 32);
    out_high[5] = (unsigned int)product;

    product = (unsigned long)x[0] * y[3] + out_high[4] + (product >> 32);
    out_high[4] = (unsigned int)product;

    product = (unsigned long)x[0] * y[2] + out_high[3] + (product >> 32);
    out_high[3] = (unsigned int)product;
    
    product = (unsigned long)x[0] * y[1] + out_high[2] + (product >> 32);
    out_high[2] = (unsigned int)product;
    
    product = (unsigned long)x[0] * y[0] + out_high[1] + (product >> 32);
    out_high[1] = (unsigned int)product;
    out_high[0] = product >> 32;
}

void mulModP256k(__private const unsigned int a[8], __private const unsigned int b[8], __private unsigned int product_low[8])
{
    __private unsigned int high[8];
    __private unsigned int low[8];

    __private unsigned int hWord = 0;
    __private unsigned int carry = 0;
    __private unsigned int t = 0;
    __private unsigned int product6 = 0;
    __private unsigned int product7 = 0;
    __private unsigned int tmp;

    // 256 x 256 multiply
    multiply256k(a, b, high, low);
    product_low[7] = low[7];
    product_low[6] = low[6];
    product_low[5] = low[5];
    product_low[4] = low[4];
    product_low[3] = low[3];
    product_low[2] = low[2];
    product_low[1] = low[1];
    product_low[0] = low[0];

    // Add 2^32 * high to the low 256 bits (shift left 1 word and add)
    // Affects product[14] to product[6]
    addc(product_low[6], high[7], product_low[6], carry, tmp);
    addc(product_low[5], high[6], product_low[5], carry, tmp);
    addc(product_low[4], high[5], product_low[4], carry, tmp);
    addc(product_low[3], high[4], product_low[3], carry, tmp);
    addc(product_low[2], high[3], product_low[2], carry, tmp);
    addc(product_low[1], high[2], product_low[1], carry, tmp);
    addc(product_low[0], high[1], product_low[0], carry, tmp);

    addc(high[0], 0, product7, carry, tmp);
    product6 = carry;

    carry = 0;

    // Multiply high by 977 and add to low
    // Affects product[15] to product[5]
    for(int i = 7; i >= 0; i--) {
        madd977(&hWord, &t, &high[i], &hWord);
        addc(product_low[i], t, product_low[i], carry, tmp);
        t = 0;
    }
    addc(product7, hWord, high[7], carry, tmp);
    addc(product6, 0, high[6], carry, tmp);

    // Multiply high 2 words by 2^32 and add to low
    // Affects product[14] to product[7]
    carry = 0;

    addc(product_low[6], high[7], product_low[6], carry, tmp);
    addc(product_low[5], high[6], product_low[5], carry, tmp);

    addc(product_low[4], 0, product_low[4], carry, tmp);
    addc(product_low[3], 0, product_low[3], carry, tmp);
    addc(product_low[2], 0, product_low[2], carry, tmp);
    addc(product_low[1], 0, product_low[1], carry, tmp);
    addc(product_low[0], 0, product_low[0], carry, tmp);

    // Multiply top 2 words by 977 and add to low
    // Affects product[15] to product[7]
    carry = 0;
    hWord = 0;
    madd977(&hWord, &t, &high[7], &hWord);
    addc(product_low[7], t, product_low[7], carry, tmp);
    madd977(&hWord, &t, &high[6], &hWord);
    addc(product_low[6], t,  product_low[6], carry, tmp);
    addc(product_low[5], hWord,  product_low[5], carry, tmp);
    // Propagate carry
    addc(product_low[4], 0, product_low[4], carry, tmp);
    addc(product_low[3], 0, product_low[3], carry, tmp);
    addc(product_low[2], 0, product_low[2], carry, tmp);
    addc(product_low[1], 0, product_low[1], carry, tmp);
    addc(product_low[0], 0, product_low[0], carry, tmp);

    // Reduce if >= P
    if(carry || greaterOrEqualToP(product_low)) {
        carry = 0;
        sub256k(product_low, P, product_low, carry, tmp);
    }
}

/**
 * Subtraction mod p
 */
void subModP256k(__private const unsigned int a[8], __private const unsigned int b[8], __private unsigned int c[8])
{
    __private unsigned int borrow = 0;
    __private unsigned int tmp;
    
    sub256k(a, b, c, borrow, tmp);
    
    if (borrow) {
        add256k(c, P, c, borrow, tmp);
    }
}

/**
 * Multiplicative inverse mod P using Fermat's method of x^(p-2) mod p and addition chains
 */
void invModP256k(__private unsigned int x[8])
{
    __private unsigned int y[8] = {0, 0, 0, 0, 0, 0, 0, 1};

    mulModP256k(x, y, y);
    mulModP256k(x, x, x);
    mulModP256k(x, x, x);
    mulModP256k(x, y, y);
    mulModP256k(x, x, x);
    mulModP256k(x, y, y);
    mulModP256k(x, x, x);
    mulModP256k(x, x, x);
    mulModP256k(x, y, y);

    for(int i = 0; i < 5; i++) {
        mulModP256k(x, x, x);
    }

    for(int i = 0; i < 22; i++) {
        mulModP256k(x, y, y);
        mulModP256k(x, x, x);
    }

    mulModP256k(x, x, x);

    for(int i = 0; i < 222; i++) {
        mulModP256k(x, y, y);
        mulModP256k(x, x, x);
    }

    mulModP256k(x, y, x);
}

void addModP256k(__private const unsigned int a[8], __private const unsigned int b[8], __private unsigned int c[8])
{
    __private unsigned int borrow = 0;
    __private unsigned int tmp = 0;

    add256k(a, b, c, borrow, tmp);

    if(borrow) { sub256k(c, P, c, borrow, tmp); }

    else if(c[0] > P[0]) { sub256k(c, P, c, borrow, tmp); } 
    else if(c[0] < P[0]) {  }

    else if(c[1] > P[1]) { sub256k(c, P, c, borrow, tmp); } 
    else if(c[1] < P[1]) {  }

    else if(c[2] > P[2]) { sub256k(c, P, c, borrow, tmp); } 
    else if(c[2] < P[2]) {  }
    
    else if(c[3] > P[3]) { sub256k(c, P, c, borrow, tmp); } 
    else if(c[3] < P[3]) {  }
    
    else if(c[4] > P[4]) { sub256k(c, P, c, borrow, tmp); } 
    else if(c[4] < P[4]) {  }
    
    else if(c[5] > P[5]) { sub256k(c, P, c, borrow, tmp); } 
    else if(c[5] < P[5]) {  }
    
    else if(c[6] > P[6]) { sub256k(c, P, c, borrow, tmp); } 
    else if(c[6] < P[6]) {  }

    else if(c[7] > P[7]) { sub256k(c, P, c, borrow, tmp); } 
}

void doublePoint(__private unsigned int x[8], __private unsigned int y[8]) {
        unsigned int yInv[8];
        unsigned int x3[8];
        unsigned int rx[8];
        unsigned int ry[8];
        unsigned int s[8];

        addModP256k(y, y, yInv);
        invModP256k(yInv);
        
	    // s = 3x^2 / 2y
        mulModP256k(x, x, x3);      // x^2

        addModP256k(x3, x3, s);     // 2x^2
        addModP256k(s, x3, s);      // 3x^2
        mulModP256k(s, yInv, s);    // 3x^2 / 2y

	    //rx = s^2 - 2x
        mulModP256k(s, s, rx);
        subModP256k(rx, x, rx);
        subModP256k(rx, x, rx);

	    //ry = s * (px - rx) - py
        subModP256k(x, rx, ry);
        mulModP256k(s, ry, ry);
        subModP256k(ry, y, ry);

        x[0] = rx[0];
        x[1] = rx[1];
        x[2] = rx[2];
        x[3] = rx[3];
        x[4] = rx[4];
        x[5] = rx[5];
        x[6] = rx[6];
        x[7] = rx[7];

        y[0] = ry[0];
        y[1] = ry[1];
        y[2] = ry[2];
        y[3] = ry[3];
        y[4] = ry[4];
        y[5] = ry[5];
        y[6] = ry[6];
        y[7] = ry[7];
}

void addPoints(__private unsigned int x1[8], __private unsigned int y1[8], __private unsigned int x2[8], __private unsigned int y2[8]) {

	if(equal256k(x1,x2) && equal256k(y1,y2)) {
		doublePoint(x1, y1);
        return;
	}
    
	if(equal256k(x1, x2)) {
        x1[0] = 0xFFFFFFFF;
        x1[1] = 0xFFFFFFFF;
        x1[2] = 0xFFFFFFFF;
        x1[3] = 0xFFFFFFFF;
        x1[4] = 0xFFFFFFFF;
        x1[5] = 0xFFFFFFFF;
        x1[6] = 0xFFFFFFFF;
        x1[7] = 0xFFFFFFFF;
        y1[0] = 0xFFFFFFFF;
        y1[1] = 0xFFFFFFFF;
        y1[2] = 0xFFFFFFFF;
        y1[3] = 0xFFFFFFFF;
        y1[4] = 0xFFFFFFFF;
        y1[5] = 0xFFFFFFFF;
        y1[6] = 0xFFFFFFFF;
        y1[7] = 0xFFFFFFFF;
        return;
	}

	if(isInfinity256k(x1) && isInfinity256k(y1)) {
        x1[0] = x2[0];
        x1[1] = x2[1];
        x1[2] = x2[2];
        x1[3] = x2[3];
        x1[4] = x2[4];
        x1[5] = x2[5];
        x1[6] = x2[6];
        x1[7] = x2[7];

        y1[0] = y2[0];
        y1[1] = y2[1];
        y1[2] = y2[2];
        y1[3] = y2[3];
        y1[4] = y2[4];
        y1[5] = y2[5];
        y1[6] = y2[6];
        y1[7] = y2[7];
        
        return;
	}

	if(isInfinity256k(x2) && isInfinity256k(y2)) {
        return;
	}

    unsigned int rx[8];
    unsigned int ry[8];
    unsigned int s[8];

	subModP256k(y1, y2, rx);

	subModP256k(x1, x2, ry);
    invModP256k(ry);
    mulModP256k(rx, ry, s);

	//rx = (s*s - px - qx) % _p;
    mulModP256k(s, s, rx);
    subModP256k(rx, x1, rx);
    subModP256k(rx, x2, rx);

	//ry = (s * (px - rx) - py) % _p;
    subModP256k(x1, rx, ry);
    mulModP256k(s, ry, ry);
    subModP256k(ry, y1, ry);
    
    x1[0] = rx[0];
    x1[1] = rx[1];
    x1[2] = rx[2];
    x1[3] = rx[3];
    x1[4] = rx[4];
    x1[5] = rx[5];
    x1[6] = rx[6];
    x1[7] = rx[7];

    y1[0] = ry[0];
    y1[1] = ry[1];
    y1[2] = ry[2];
    y1[3] = ry[3];
    y1[4] = ry[4];
    y1[5] = ry[5];
    y1[6] = ry[6];
    y1[7] = ry[7];
}

__constant unsigned int gx[256][8] = { 
    { 0x79be667e, 0xf9dcbbac, 0x55a06295, 0xce870b07, 0x29bfcdb, 0x2dce28d9, 0x59f2815b, 0x16f81798 },
    { 0xc6047f94, 0x41ed7d6d, 0x3045406e, 0x95c07cd8, 0x5c778e4b, 0x8cef3ca7, 0xabac09b9, 0x5c709ee5 },
    { 0xe493dbf1, 0xc10d80f3, 0x581e4904, 0x930b1404, 0xcc6c1390, 0xee07584, 0x74fa94ab, 0xe8c4cd13 },
    { 0x2f01e5e1, 0x5cca351d, 0xaff3843f, 0xb70f3c2f, 0xa1bdd05, 0xe5af888a, 0x67784ef3, 0xe10a2a01 },
    { 0xe60fce93, 0xb59e9ec5, 0x3011aabc, 0x21c23e97, 0xb2a31369, 0xb87a5ae9, 0xc44ee89e, 0x2a6dec0a },
    { 0xd30199d7, 0x4fb5a22d, 0x47b6e054, 0xe2f378ce, 0xdacffcb8, 0x9904a61d, 0x75d0dbd4, 0x7143e65 },
    { 0xbf23c154, 0x2d16eab7, 0xb1051ea, 0xf832823c, 0xfc4c6f1d, 0xcdbafd81, 0xe37918e6, 0xf874ef8b },
    { 0x34ff3be4, 0x33f7a06, 0x696c3d09, 0xf7d1671c, 0xbcf55cd7, 0x535655, 0x64707745, 0x6769a24e },
    { 0x82822632, 0x12c609d9, 0xea2a6e3e, 0x172de238, 0xd8c39cab, 0xd5ac1ca1, 0x646e23f, 0xd5f51508 },
    { 0x465370b2, 0x87a79ff3, 0x905a857a, 0x9cf918d5, 0xadbc968, 0xd9e159d0, 0x926e2c00, 0xef34a24d },
    { 0x241febb8, 0xe23cbd77, 0xd664a18f, 0x66ad6240, 0xaaec6ecd, 0xc813b088, 0xd5b901b2, 0xe285131f },
    { 0x5d1bdb4e, 0xa172fa79, 0xfce4cc29, 0x83d8f8d9, 0xfc318b85, 0xf423de0d, 0xedcb6306, 0x9b920471 },
    { 0x175e159f, 0x728b865a, 0x72f99cc6, 0xc6fc846d, 0xe0b93833, 0xfd2222ed, 0x73fce5b5, 0x51e5b739 },
    { 0x423a013f, 0x3ff32d7, 0xa5ffbcc8, 0xe139c621, 0x30fdfeb5, 0xc6da121b, 0xce78049e, 0x46bc47d6 },
    { 0x111d6a45, 0xac1fb905, 0x8907a7a, 0xbcd68776, 0x49df662f, 0x3b3e2741, 0x302df6f7, 0x8416824a },
    { 0x4a4a6dc9, 0x7ac7c8b8, 0xad795dbe, 0xbcb9dcff, 0x7290b68a, 0x5ef74e56, 0xab5edde0, 0x1bced775 },
    { 0x363d90d4, 0x47b00c9c, 0x99ceac05, 0xb6262ee0, 0x53441c7e, 0x55552ffe, 0x526bad8f, 0x83ff4640 },
    { 0x4c1b9866, 0xed9a7e9b, 0x553973c6, 0xc93b02bf, 0xb62fb01, 0x2edfb59d, 0xd2712a5c, 0xaf92c541 },
    { 0xa4083877, 0xba83b12b, 0x529a2f3c, 0x780b54e, 0x3233edbc, 0x1a28f135, 0xe0c8f28c, 0xbeaaf3d1 },
    { 0xa804c641, 0xd28cc0b5, 0x3a4e3e1a, 0x2f56c86f, 0x6e0d880a, 0x454203b9, 0x8cd3db5a, 0x7940d33a },
    { 0x8b4b5f16, 0x5df3c2be, 0x8c6244b5, 0xb7456388, 0x43e4a781, 0xa15bcd1b, 0x69f79a55, 0xdffdf80c },
    { 0xed0c5ce4, 0xe1329171, 0x8ce17c7e, 0xc83c6110, 0x71af64ee, 0x417c997a, 0xbb3f2671, 0x4755e4be },
    { 0xfaecb013, 0xc44ce694, 0xb3b15c3f, 0x83f1fae8, 0xe5325456, 0x6e0552ce, 0xd4b6e6c8, 0x7cec8ab },
    { 0x9bb8a13, 0x2dcad2f2, 0xc8731a0b, 0x37cbcafd, 0xb3b2dd82, 0x4f23cd3e, 0x7f64eae, 0x9ad1b1f7 },
    { 0x723cbaa6, 0xe5db996d, 0x6bf771c0, 0xbd548c7, 0xb700dbff, 0xa6c0e77b, 0xcb611592, 0x5232fcda },
    { 0x57efa786, 0x437b744d, 0x343d7dc4, 0x5773a3c6, 0x2d240a43, 0x7984907, 0x1fd383d6, 0xca030d5 },
    { 0x264bbd43, 0x6a28bc42, 0xa2df7e9c, 0xd5226cb9, 0x1080577e, 0x327b012a, 0x7fafc777, 0xc584dd5 },
    { 0xa94c6524, 0xbd40d2bb, 0xdac85c05, 0x6236a79d, 0xa78bc61f, 0xd5bdec9d, 0x2bf26bd8, 0x4b2438e8 },
    { 0xeebfa4d4, 0x93bebf98, 0xba5feec8, 0x12c2d3b5, 0x9479612, 0x37a91983, 0x9a533eca, 0xe7dd7fa },
    { 0x381c4ad7, 0xa7a97bfd, 0xa61c6031, 0xc118495f, 0xc4ea4bc0, 0x8f6766d6, 0x76bee908, 0x47d297fd },
    { 0xe1efb9cd, 0x5adc63b, 0xcce10831, 0xd9538c47, 0x9cf1d05f, 0xefdd08b2, 0x448d7042, 0x2ede454c },
    { 0x5318f9b1, 0xa2697010, 0xc5ac235e, 0x9af475a8, 0xc7e5419f, 0x33d47b18, 0xd33feeb3, 0x29eb99a4 },
    { 0x100f44da, 0x696e7167, 0x2791d0a0, 0x9b7bde45, 0x9f1215a2, 0x9b3c03bf, 0xefd7835b, 0x39a48db0 },
    { 0x8c0989f2, 0xceb5c771, 0xa8415dff, 0x2b4c4199, 0xd8d9c8f9, 0x237d0808, 0x4b05284f, 0x1e4df706 },
    { 0xfb8f153c, 0x5e266704, 0xc4a48174, 0x3262c025, 0x9c528539, 0xbc95bc1b, 0xb1e63c33, 0xdc47bffd },
    { 0xe747333f, 0xd75d5175, 0x5a0cc9f0, 0xa7287084, 0x65a02c58, 0x7737a7b8, 0xb8fa1b8b, 0x4bb2629a },
    { 0xe1031be2, 0x62c7ed1b, 0x1dc9227a, 0x4a04c017, 0xa77f8d44, 0x64f3b385, 0x2c8acde6, 0xe534fd2d },
    { 0xf4b93f22, 0x4c8089ea, 0xb9f95dcd, 0xf29b2c9, 0x28a6ac5, 0xde94d857, 0x84e27e36, 0xa95c8356 },
    { 0x9d1aca1, 0xfce55236, 0xb19622ea, 0x25b08b0, 0xd51e8512, 0xf97e696c, 0x20d62fe1, 0x7b160e8a },
    { 0xc66c59cc, 0x454c2b9e, 0x18a2ad79, 0x3821cde7, 0x518b3a93, 0xbfc39562, 0xe97d7d04, 0x75ba7fc2 },
    { 0xfeea6cae, 0x46d55b53, 0xac2839f, 0x143bd7ec, 0x5cf8b266, 0xa41d6af5, 0x2d5e688d, 0x9094696d },
    { 0x4d000b62, 0x1adb87e1, 0xc53261af, 0x9db2e179, 0x141ecae0, 0xb331a187, 0xaa4040a, 0xee752b08 },
    { 0x71f570ca, 0x203da05d, 0xd6aa2621, 0x14717128, 0xd657a040, 0x3e1f1b77, 0xf89962fd, 0x475c58ef },
    { 0xa2b7b362, 0x9f7bd253, 0xb7d282b5, 0xc21da014, 0x46b4821d, 0xc65e7651, 0x6048b060, 0x43ff8359 },
    { 0xda67a91d, 0x91049cdc, 0xb367be4b, 0xe6ffca3c, 0xfeed657d, 0x808583de, 0x33fa978b, 0xc1ec6cb1 },
    { 0x4dbacd36, 0x5fa1ef58, 0x7c0c0cfa, 0xaf00d871, 0x8bbd9f35, 0xccea5a83, 0x5ee3cc82, 0x1fe741c9 },
    { 0x13d1ffc4, 0x81509bee, 0xe68f17d8, 0xff41c259, 0xf4c85f1, 0x52686050, 0x87eda8ba, 0xb4e218da },
    { 0x219b4f9c, 0xef6c6000, 0x7659c79c, 0x45b0533b, 0x3cc9d916, 0xce29dbff, 0x133b40ca, 0xa2e96db8 },
    { 0x53904faa, 0xb334cdd, 0xa6e00093, 0x5ef22151, 0xec08d0f7, 0xbb11069f, 0x57545ccc, 0x1a37b7c0 },
    { 0x1a575af, 0x9d414675, 0x3cf99119, 0x6316995d, 0x2a6ee7aa, 0xad0f85ad, 0x57cd0f1f, 0x38a47ca9 },
    { 0xf5f0e043, 0x7621d439, 0xca71f5c1, 0xb76155d6, 0xd3a61a83, 0xd3c20c6e, 0xe309d755, 0xe315565b },
    { 0x8f506f0b, 0x6c0b6e9a, 0x57a7f36d, 0x970ca4e3, 0x47cbc921, 0x46227642, 0xcbe781d9, 0xf5362d33 },
    { 0x8e7bcd0b, 0xd35983a7, 0x719cca77, 0x64ca9067, 0x79b53a04, 0x3a9b8bca, 0xeff959f4, 0x3ad86047 },
    { 0x33b35baa, 0x195e729d, 0xc350f319, 0x996950df, 0x3bc15b8d, 0x3d0389e7, 0x77d2808b, 0xf13f0351 },
    { 0x374deeae, 0x22c93f95, 0x5cb83ad2, 0x71f7e22, 0x56f6e109, 0xcad7bca6, 0xd71dc7b2, 0x4414bb36 },
    { 0x2380c09c, 0x7f3aeae5, 0x7c46e073, 0x95aeb0dc, 0x944dbaf2, 0xb62a9f0c, 0x5e8a64ad, 0x6ae7d616 },
    { 0x385eed34, 0xc1cdff21, 0xe6d08186, 0x89b81bde, 0x71a7f4f1, 0x8397e669, 0xa841e15, 0x99c43862 },
    { 0xf6f62208, 0x3daf5480, 0x456be13, 0x4d5f67d1, 0x47c82642, 0xbefc1ce2, 0xdc83a270, 0x78f2827c },
    { 0xfb26e518, 0x8f953de2, 0xbd70cb3c, 0x3d1fc255, 0xcd91c3ce, 0x7d8c6f36, 0x9d893209, 0x715adcb6 },
    { 0x89912259, 0x11b9132d, 0x28f5c6bc, 0x763ceab7, 0xd18c3706, 0xe8bd1d7, 0xed44db75, 0x60788c1e },
    { 0x6f9d9b8, 0x3ecf191, 0x637c73a4, 0x413dfa18, 0xfddf84a, 0x5947fbc9, 0xc606ed86, 0xc3fac3a7 },
    { 0xae86eeea, 0x252b411c, 0x1cdc36c2, 0x84482939, 0xda1745e5, 0xa7e4da17, 0x5c9d2274, 0x4b7fd72d },
    { 0x2248c9f9, 0xbbfff55, 0xe61d2f8c, 0x56dc2c48, 0x8718be75, 0xcf36f2ee, 0x7a147426, 0x7c169290 },
    { 0xe11a6e16, 0xe05c4407, 0x4ac11b48, 0xd94085d0, 0xa99f0877, 0xdd1c6f76, 0xfd0dac4b, 0xb50964e3 },
    { 0x3322d401, 0x243c4e25, 0x82a2147c, 0x104d6ecb, 0xf774d163, 0xdb0f5e53, 0x13b7e0e7, 0x42d0e6bd },
    { 0x8d262002, 0x50cebdae, 0x120ef31b, 0x4c80cd5, 0xd4cddc8, 0xeadbcf29, 0xfc696d32, 0xc0ade462 },
    { 0x1238c076, 0x6eaebea9, 0xce4068a1, 0xf594d03b, 0x8ed4930d, 0x72d9c8b, 0x9164643e, 0x1516e633 },
    { 0x271d5b07, 0x70cb9c15, 0xe7b2ea75, 0x8a6a11b9, 0xcddcd728, 0x2b0ec216, 0x19b01552, 0x788e7a66 },
    { 0x85672c7d, 0x2de0b7da, 0x2bd1770d, 0x89665868, 0x741b3f9a, 0xf7643397, 0x721d74d2, 0x8134ab83 },
    { 0x534ccf6b, 0x740f9ec0, 0x36c18612, 0x15c8a61f, 0x3b89ea46, 0xdf2e6d96, 0x998b90bc, 0x1f17fc25 },
    { 0xa91d1f5c, 0xee87b7f3, 0x81e1420, 0x18f8aaed, 0x79020d47, 0xecfbc8d2, 0xc7170923, 0xe8bee8b6 },
    { 0xc15c8c23, 0xd90c8e35, 0xc1a214dd, 0xe2d4383c, 0x735ae45, 0xbef61f10, 0xaa1a1c25, 0x5984cf74 },
    { 0x948bf80, 0x9b1988a4, 0x6b06c9f1, 0x919413b1, 0xf9226c6, 0xf668832, 0xffd959af, 0x60c82a0a },
    { 0x26952c7f, 0x372e5936, 0xd5ce4c6, 0x6291f0b6, 0xef16c133, 0x1e825e51, 0x396eb045, 0x7e8b000a },
    { 0xc62e58e6, 0xfc23c5bd, 0xbef2be8b, 0x131ff243, 0xf5211965, 0x72d6b0e9, 0xf1025889, 0x76134f96 },
    { 0x10746052, 0xeec5c74, 0x1683329a, 0x716622b0, 0xb81c0320, 0x807de97, 0x3686f880, 0xb188cbb },
    { 0x6260ce7f, 0x461801c3, 0x4f067ce0, 0xf02873a8, 0xf1b0e44d, 0xfc69752a, 0xccecd819, 0xf38fd8e8 },
    { 0x85d8da47, 0x48ad1a73, 0xdec8409b, 0xe84f1a13, 0x16e65c51, 0x96aad27e, 0x766746f, 0x3d477c2d },
    { 0x8e2a7166, 0xe7ec4b96, 0x8c0892e9, 0xcc3ee3ee, 0x4d1e7e10, 0xfdc47f0, 0x4850312d, 0x6c0b80d9 },
    { 0x769bc758, 0x42bff58e, 0xdc8366ec, 0xd78f8950, 0xee4ab2e8, 0x1359d90f, 0x9921fa3d, 0x2c4561be },
    { 0xe5037de0, 0xafc1d8d4, 0x3d834841, 0x4bbf4103, 0x43ec8f5, 0x75bfdc43, 0x2953cc8d, 0x2037fa2d },
    { 0xa5e00da4, 0x67fd5494, 0xf40b6cf7, 0xd2d61b3e, 0xc3ab217c, 0x792a2ddb, 0x8c63c8c7, 0x9e3d34ef },
    { 0xa99415f5, 0xef3a2b40, 0x3519f4bb, 0x1c9bfbc4, 0x6d4afd2e, 0x4477572a, 0xe6737160, 0xd7b91252 },
    { 0xb56f4e9f, 0x9e4fd1fc, 0x7d8edde0, 0x98f935f8, 0x4c750d70, 0x5f0c132b, 0xd8c465b6, 0x6a540f17 },
    { 0xe06372b0, 0xf4a207ad, 0xf5ea905e, 0x8f1771b4, 0xe7e8dbd1, 0xc6a6c5b7, 0x25866a0a, 0xe4fce725 },
    { 0xeac134c, 0xa2046b8f, 0x9c8dbd30, 0x4fad3f3c, 0x45ebfdb, 0x4ec6ed3c, 0xfe09aee4, 0x3ed2ff3e },
    { 0xd6788590, 0x731fea19, 0x8392119d, 0x7adbb41f, 0xf5948a78, 0x4c85b17, 0x476706e4, 0xdfbfa4dc },
    { 0x6930fccb, 0xd9a04097, 0x4abf210f, 0x12b71d4b, 0xc7b1a620, 0x5599b01a, 0x7275fb40, 0xe48ff9b3 },
    { 0x213c7a71, 0x5cd5d453, 0x58d0bbf9, 0xdc0ce022, 0x4b10bdd, 0xe2a3f585, 0x40ad6908, 0xd0559754 },
    { 0x1c5e5481, 0x32b49a7f, 0x66ae9fed, 0x8323480e, 0xd1ab974, 0x622e7cf0, 0x8993895e, 0xec87fac },
    { 0x46276d06, 0x2c5668d, 0xdef6e942, 0x10bbc7ce, 0x1f901c19, 0xfed5c970, 0xe20fcba1, 0xd4531dbc },
    { 0xefea68ec, 0xa7a6c24f, 0x4e65eb21, 0x1c319163, 0x6850e0ac, 0xdc78d899, 0x6114ef13, 0x522f001d },
    { 0x4e7c272a, 0x7af4b34e, 0x8dbb9352, 0xa5419a87, 0xe2838c70, 0xadc62cdd, 0xf0cc3a3b, 0x8fbd53c },
    { 0x899017b0, 0x2696888f, 0x268a269f, 0x4e385d9c, 0x9b11f25a, 0x1bef8790, 0xe2821e6e, 0x7c6e1b4d },
    { 0x67f644f7, 0x6e905fd4, 0xa8f4728e, 0x63227f0e, 0x2831f5bf, 0x91b583a8, 0xaf2635a1, 0x7e5f712f },
    { 0x327f876c, 0x93652555, 0xfa80a054, 0x968b4712, 0x930dc930, 0x12ee6b8d, 0xc10263ed, 0x3b89a762 },
    { 0xfea74e3d, 0xbe778b1b, 0x10f238ad, 0x61686aa5, 0xc76e3db2, 0xbe430576, 0x32427e28, 0x40fb27b6 },
    { 0xed9441c8, 0x304280ff, 0x180e03d8, 0x50e8cd0e, 0xbb570ee5, 0xde373048, 0x8fd97c96, 0x1f9756e4 },
    { 0x29d9698e, 0xe67a7c3f, 0xc9fed3f6, 0x24b48751, 0x5b10bdd8, 0x4fab4d30, 0x15bad033, 0xd51cf119 },
    { 0x126b57d0, 0x5013936d, 0x6f3fb7bd, 0x33580a31, 0xfd453e4a, 0x86060cff, 0x467c4453, 0x7f422491 },
    { 0x76e64113, 0xf677cf0e, 0x10a2570d, 0x599968d3, 0x1544e179, 0xb7604329, 0x52c02a44, 0x17bdde39 },
    { 0x708a530e, 0x9e52c73b, 0xee87c9d8, 0x8161c810, 0x5d5762, 0x2c29ae69, 0x1cf999a8, 0x3a1187a5 },
    { 0x19cf034f, 0xc48b3be2, 0x19bd6483, 0x95e462cf, 0x9f374b6d, 0x86b2b59e, 0x2e1b16c6, 0xcde4f5be },
    { 0xaf6c44a0, 0x78cb5f0d, 0x7c719c2f, 0x8397f576, 0xee93bd03, 0x4bea2219, 0xe3abc209, 0xd17cf3e8 },
    { 0xc738c56b, 0x3b2abe1, 0xe8281baa, 0x743f8f9a, 0x8f7cc643, 0xdf26cbee, 0x3ab15024, 0x2bcbb891 },
    { 0x5578845e, 0xcd7c0374, 0x35b32a69, 0x92e7aa94, 0x647197ea, 0x49b8c9e4, 0xddaab078, 0x4662ab1b },
    { 0x47f33838, 0x88a364cc, 0x4abfa3bc, 0x1d0ceccd, 0x22f12354, 0xfce39960, 0x94f869b8, 0x948b6c29 },
    { 0xc0c01f34, 0xae41b8cf, 0xe466b4c9, 0xc6a5d5f6, 0x14f570d6, 0xfcbef768, 0xa81a6c8f, 0x5ff4adb },
    { 0xd8956265, 0x48b65b81, 0xe264c763, 0x7c972877, 0xd1d72e5f, 0x3a925014, 0x372e9f65, 0x88f6c14b },
    { 0xfd136eef, 0x8971044e, 0x8a3a4362, 0x2003a267, 0x3ecaf7a, 0xec40c3f, 0xba5b594b, 0x77078424 },
    { 0xd99e8e9d, 0xd9638d14, 0xe9cca53, 0x67519f86, 0x1b7003a0, 0xd43f024a, 0x5f1d84ec, 0x8db1cb3c },
    { 0x3fdf161, 0x9a198317, 0xa1bd8a54, 0xe5b09191, 0xd203351e, 0x440e636, 0xfd46f68d, 0x3c385172 },
    { 0xb8da9403, 0x2a957518, 0xeb0f6433, 0x571e8761, 0xceffc736, 0x93e84edd, 0x49150a56, 0x4f676e03 },
    { 0x6d36d105, 0xed8cc5ce, 0x53f2cb69, 0x8ab620f9, 0x469a3e5c, 0xb25bf6e6, 0xd413f414, 0xc5af726a },
    { 0x3ab6bde1, 0xcd3ac0c, 0xd06883fa, 0x66f0b0e3, 0xeb1309c0, 0x534b8122, 0x86e2a30c, 0xa540db99 },
    { 0x796634e3, 0xf1ad56f0, 0xfdba069d, 0x9d07bce2, 0xba2fd4f3, 0x73ddd3ba, 0x7777bf27, 0x9f1048da },
    { 0xe80fea14, 0x441fb33a, 0x7d8adab9, 0x475d7fab, 0x2019effb, 0x5156a792, 0xf1a11778, 0xe3c0df5d },
    { 0x440ca1f0, 0x8ea41265, 0x981ac4ed, 0x1efe7a37, 0x122dcc38, 0x77d2f916, 0x2db0e78b, 0xf83cd58 },
    { 0xf694cbaf, 0x2b966c1c, 0xc5f7f829, 0xd3a90781, 0x9bc70ebc, 0xc1b229d9, 0xe81bda27, 0x12998b10 },
    { 0x8b6e862a, 0x35566848, 0x50b6d4f4, 0x39a25950, 0x47abf695, 0xc08b6414, 0xf95a1335, 0x8dd553fd },
    { 0xa301697b, 0xdfcd7043, 0x13ba48e5, 0x1d567543, 0xf2a18203, 0x1efd6915, 0xddc07bbc, 0xc4e16070 },
    { 0x27e1e59c, 0xff79f049, 0xf3e8d241, 0x9e0bff74, 0xb4396500, 0x4c34b5d8, 0x11420316, 0xf24ba5ae },
    { 0xc712e7a5, 0xf6864aee, 0x16588ec3, 0x892d7e4f, 0x5a39adde, 0x84fbfb4f, 0x9969175c, 0x9caed7ae },
    { 0xbfc0504, 0xa4b3235d, 0x65c0d42, 0x6b8675fc, 0xb2c85d6f, 0x58275d79, 0x1b43e1fe, 0x44a6db03 },
    { 0x90ad85b3, 0x89d6b936, 0x463f9d05, 0x12678de2, 0x8cc330b, 0x11307fff, 0xab7ac63e, 0x3fb04ed4 },
    { 0x7e2cd40e, 0xf8c94077, 0xf44b1d15, 0x48425e3d, 0x7e125be6, 0x46707bad, 0x2818b0ed, 0xa7dc0151 },
    { 0xa146f521, 0x95bedace, 0x21c975bb, 0xd1ef52a7, 0x9c636bf9, 0xdb853cf9, 0xe103ae4, 0x1345e597 },
    { 0xd24c75a1, 0xcf1993b9, 0xbcfbf9da, 0xb25a8114, 0xdbde421e, 0xfeccc4e2, 0xcbb53fc, 0x4ce45444 },
    { 0x8f68b9d2, 0xf63b5f33, 0x9239c1ad, 0x981f162e, 0xe88c5678, 0x723ea335, 0x1b7b444c, 0x9ec4c0da },
    { 0x4d49aefd, 0x784e8158, 0xfcafebe7, 0x7fd9af59, 0xd89858ad, 0xe7627eae, 0xe6847df8, 0x4cf27076 },
    { 0x7564539e, 0x85d56f85, 0x37d6619e, 0x1f5c5aa7, 0x8d2a3de0, 0x889d1d4e, 0xe8dbcb57, 0x29b62026 },
    { 0x210a917a, 0xd9df2779, 0x6746ff30, 0x1ad9ccc8, 0x78f61a5f, 0x1ff4082b, 0x5364dacd, 0x57b4a278 },
    { 0xe4f3fb01, 0x76af85d6, 0x5ff99ff9, 0x198c3609, 0x1f48e865, 0x3681e3e, 0x6686fd50, 0x53231e11 },
    { 0x4b30cbb7, 0x686773e0, 0x1ec64110, 0xabdb362f, 0x88531a82, 0x5ba17295, 0x3bfee223, 0x3bcdaf2f },
    { 0xcbb434aa, 0x7ae1700d, 0xcd15b20b, 0x17464817, 0xec117150, 0x50e0fa19, 0x2ffe9c29, 0xa673059f },
    { 0xf478056d, 0x9c102c1c, 0xd06d7b1e, 0x7557244c, 0x6d9cdac5, 0x874610e9, 0x4d4786e1, 0x6de12c0 },
    { 0x8c00fa9b, 0x18ebf331, 0xeb961537, 0xa45a4266, 0xc7034f2f, 0xd4e1d07, 0x16fb6eae, 0x20eae29e },
    { 0x24cfc017, 0x6da2b46f, 0xa8bb5bf9, 0x636be1ef, 0xfd7e297f, 0x29122fb3, 0xe84c9ab0, 0xc18ada5f },
    { 0x4a7d58, 0xd4b9bc82, 0xea2ded72, 0xa1292ec6, 0x16ddd67f, 0xc7f057ed, 0xf1031895, 0x94679da2 },
    { 0xee7d69c4, 0xcbd001c7, 0xfc76c5e2, 0xc066ce49, 0x96f8808a, 0x1e07b2a9, 0xccf34ead, 0xc87c4b65 },
    { 0xe7a26ce6, 0x9dd4829f, 0x3e10cec0, 0xa9e98ed3, 0x143d084f, 0x308b92c0, 0x997fddfc, 0x60cb3e41 },
    { 0xf5cafaba, 0x36bf8d0, 0xd38bfb6, 0x772089f5, 0x203c35e4, 0xd6e32fa9, 0xd97e5b91, 0x7b4ae861 },
    { 0xe9389024, 0xceb63f1f, 0x12df5156, 0xd7e80542, 0x8f9e509c, 0x494c9820, 0x84fd4cd7, 0xbd2a9651 },
    { 0x264559d8, 0x7829256b, 0xed116900, 0xd82d0c37, 0x9f0e4d12, 0x53c68e6f, 0xcf2d41ae, 0x7cddab8b },
    { 0xb6459e0e, 0xe3662ec8, 0xd23540c2, 0x23bcbdc5, 0x71cbcb96, 0x7d79424f, 0x3cf29eb3, 0xde6b80ef },
    { 0xe5d8e8f0, 0xd9823c88, 0xe4d36f73, 0x1f41593, 0xb6890576, 0xbe79c211, 0x253ef375, 0x33eb51f },
    { 0xa9ca27f7, 0x7dbc8c3d, 0xc56b0f73, 0x21bae0dd, 0xab66be4f, 0xa8a30117, 0x37a67648, 0xf155e64 },
    { 0x68fb7180, 0x686d7f2, 0x5eba1056, 0x11cfe759, 0x1f478e84, 0x7f51cee0, 0x6d4bc629, 0xd6ee247c },
    { 0xd68a80c8, 0x280bb840, 0x793234aa, 0x118f0623, 0x1d6f1fc6, 0x7e73c5a5, 0xdeda0f5b, 0x496943e8 },
    { 0xf16a409c, 0x677a40be, 0x402f8efb, 0x3752373c, 0xaced053c, 0x6f702b82, 0x8bda222c, 0xa412b6fd },
    { 0x4154b506, 0xab766f42, 0xfbe37f69, 0x9976f84d, 0xb89f4f2f, 0x6bed9832, 0x5c1a0b6e, 0x326dd4e4 },
    { 0xb73c6527, 0x69cc95c1, 0x80a8d4d, 0xb5956ea, 0x93e86e49, 0xfc727ddf, 0x4c51a7a6, 0x3f7f0246 },
    { 0x324aed7d, 0xf65c8042, 0x52dc0270, 0x907a30b0, 0x9612aeb9, 0x73449cea, 0x4095980f, 0xc28d3d5d },
    { 0x32c9331e, 0xa26f4902, 0x28d32681, 0x880d7203, 0xf72b3e4a, 0x8de0db1f, 0xa8f38381, 0xb2919749 },
    { 0xeb292f3b, 0x3b983785, 0x4a02f6a7, 0xfec6b1c, 0x69c161b6, 0xe1846b8e, 0x1e1c2252, 0x7b9795e4 },
    { 0xa65a3a01, 0xdf3b5ef2, 0xe620d431, 0x49fbe1, 0x4d71457f, 0x19d1ed35, 0xaea39d57, 0x89303fdd },
    { 0x4df9c149, 0x19cde61f, 0x6d51dfdb, 0xe5fee5dc, 0xeec4143b, 0xa8d1ca88, 0x8e8bd373, 0xfd054c96 },
    { 0xed32cad8, 0xd2cc998c, 0xd25317d4, 0xe4b87088, 0xe9de4554, 0xe57a8d70, 0xc0c6b0fc, 0x1da49e04 },
    { 0xe821ab72, 0x4d6360f1, 0x8049e411, 0x1c70366e, 0x28c36dcb, 0x63c34016, 0xcb7418d4, 0xe883f855 },
    { 0x3f0d8994, 0xe51ad212, 0xf455452f, 0xbc9693a7, 0x2f14a547, 0xaf3806e9, 0xfbff59ee, 0xb441742e },
    { 0x9c3919a8, 0x4a474870, 0xfaed8a9c, 0x1cc66021, 0x52348905, 0x4d7f0308, 0xcbfc99c8, 0xac1f98cd },
    { 0x2e3c0532, 0x6255d80f, 0xa42fc69, 0xd5c92aa4, 0xcd326a5, 0x3e8535f0, 0x435efb7b, 0x694a09ec },
    { 0xe8e2a24c, 0xcfa41587, 0xae15fb7e, 0x3e24dda4, 0x33710316, 0xa1908934, 0x205f19a2, 0xab9c7ce6 },
    { 0xa7549aac, 0x5d8573c2, 0xb2f0a38b, 0x170032a2, 0x12acaf92, 0x383d5b5f, 0x5b0d3966, 0x8ac7b3c2 },
    { 0x6057170b, 0x1dd12fdf, 0x8de05f28, 0x1d8e06bb, 0x91e1493a, 0x8b91d4cc, 0x5a213821, 0x20a959e5 },
    { 0x6773fd67, 0x7c52e064, 0x394110a, 0x46dc85df, 0x7c133f8d, 0xd4a28e66, 0x1899ca5d, 0x82fd545c },
    { 0xe0f86d94, 0xd17ce565, 0x237c79aa, 0xce0c87c2, 0x374e438, 0x10468050, 0x373c616b, 0xb86f021 },
    { 0x42ca15ab, 0x9f245041, 0xce991e19, 0x3d696f4f, 0x4c277df9, 0x8cad603, 0x8ad0772c, 0x2da6e03 },
    { 0xa576df8e, 0x23a08411, 0x421439a4, 0x518da318, 0x80cef0fb, 0xa7d4df12, 0xb1a6973e, 0xecb94266 },
    { 0x9e5dcc62, 0xef3b5a3b, 0x54652086, 0x7be71bae, 0x6f3ba063, 0xc9acfb8d, 0xcec5725b, 0xda704896 },
    { 0xa7de0837, 0x5b8745ad, 0xf8d6e9f9, 0x76f03b20, 0xe33625a0, 0x5cef5833, 0x953ed587, 0x44bf7ea0 },
    { 0xc266658e, 0x689080c9, 0xc13c35ac, 0x1cff4cb, 0xe68065fd, 0xe949e4a3, 0xa9f8fa10, 0x4ad916fb },
    { 0x7778a78c, 0x28dec3e3, 0xa05fe96, 0x29de8c38, 0xbb30d1f5, 0xcf9a3a20, 0x8f763889, 0xbe58ad71 },
    { 0xe7b9796b, 0x5ca006d1, 0x632f482d, 0x7f0fe393, 0x2cf16a5a, 0xe104eea7, 0xa7ea1c25, 0x1073e879 },
    { 0x71bf018, 0x50876203, 0xc2c915a2, 0x4be09a73, 0x65423daa, 0xf2aee919, 0x865d722b, 0xf2628f0f },
    { 0x218343a, 0xcb9be568, 0x33a32e59, 0x4c03c39e, 0x5b1911c8, 0x50121378, 0x6f6376df, 0xa39620e1 },
    { 0x928955e, 0xe637a844, 0x63729fd3, 0xe7afd2e, 0xd5f96274, 0xe5ad7e5c, 0xb09eda9c, 0x6d903ac },
    { 0x4f89bdee, 0x3771d350, 0xdad163b0, 0x4cb18ad6, 0x7ce5e9c5, 0x5b58f0e7, 0x231047a6, 0xf59dd9e },
    { 0xcb9e8304, 0xcae3c5a8, 0xc396bac, 0xa2c3c4c9, 0x94b668f0, 0x79a245bf, 0x529c314c, 0xfff01197 },
    { 0xe2f349b0, 0xf89c69bd, 0x3c8cf2a4, 0x10730dc5, 0x8e0beed4, 0x7048c58c, 0x15f9ffc2, 0x508d2cc2 },
    { 0x85d0fef3, 0xec6db109, 0x399064f3, 0xa0e3b285, 0x5645b4a9, 0x7ad3545, 0x27aae751, 0x63d82751 },
    { 0x6b790f4b, 0x19a4c4f4, 0xf607a6cf, 0xcd11df04, 0x68b482e0, 0x9711ff7, 0x56356d14, 0x1d5fcade },
    { 0x41149b2c, 0x2d7ebed3, 0xc162c367, 0xacc4f8fe, 0x3d2479de, 0x85978be0, 0xbb0ccdab, 0xe3a3e0cb },
    { 0xd1fad4fa, 0x4e7c849d, 0xfaec3dfe, 0x2872a7ba, 0x664a9b82, 0x5c29ceb, 0xf8dddd28, 0xe3f3d3fc },
    { 0xff2b0dce, 0x97eece97, 0xc1c9b604, 0x1798b85d, 0xfdfb6d88, 0x82da2030, 0x8f540482, 0x4526087e },
    { 0x2982dbbc, 0x5f366c9f, 0x78e29ebb, 0xecb1bb22, 0x3deb5c4e, 0xe638b458, 0x3bd3a9af, 0x3149f8ef },
    { 0x1a28e504, 0x2af0c0f6, 0xb436eb59, 0x497db58, 0x60011f45, 0x80e17658, 0x85289f61, 0x2380441b },
    { 0xc8b83e9, 0x535f3060, 0x1d250cc0, 0xbd3f2014, 0x2edd5eb7, 0x985d8324, 0x2eef0e39, 0x621e30a7 },
    { 0x827fbbe4, 0xb1e880ea, 0x9ed2b2e6, 0x301b212b, 0x57f1ee14, 0x8cd6dd28, 0x780e5e2c, 0xf856e241 },
    { 0xb77f12a7, 0xdce56b97, 0x3e2d7c8d, 0x576e6b36, 0x60470a92, 0x18b87461, 0xef6e44b7, 0xcb1815d },
    { 0x48973b94, 0x3018bf12, 0x47b308b2, 0xcb79f956, 0xd858d8df, 0x4977c597, 0xfe5dad2, 0xc45565ec },
    { 0xe931258e, 0x8eb5559c, 0x6d697272, 0x8a704c17, 0xb775a26, 0x5b4527d4, 0xa4d4d742, 0xbbfd71fa },
    { 0xeaa649f2, 0x1f51bdba, 0xe7be4ae3, 0x4ce6e521, 0x7a58fdce, 0x7f47f9aa, 0x7f3b58fa, 0x2120e2b3 },
    { 0x3adb9db3, 0xbeb997ee, 0xc2623ea5, 0x2279ea, 0x9e337b5c, 0x705f3db4, 0x53dbc1cc, 0x1fc9b0a8 },
    { 0x129e53ac, 0x428e9cbb, 0x7e10955e, 0x56c5fc69, 0xfefdff56, 0x963e7caf, 0x54e9e0c, 0x90ae86f9 },
    { 0x60144494, 0xc8f69448, 0x5b85ecb6, 0xaee10956, 0xc756267d, 0x12894711, 0x922243d5, 0xe855b8da },
    { 0xe4a42d43, 0xc5cf169d, 0x9391df6d, 0xecf42ee5, 0x41b6d8f0, 0xc9a13740, 0x1e23632d, 0xda34d24f },
    { 0xfd6451fb, 0x84cfb18d, 0x3ef0acf8, 0x56c4ef4d, 0x553c562, 0xf7ae4d2a, 0x303f2ea3, 0x3e8f62bb },
    { 0x1eee207c, 0xb24086bc, 0x716e81a0, 0x6f9edbbb, 0x42e2d5, 0xdcf3c7a1, 0xfa1d1fb9, 0xd5fe696b },
    { 0xcc0ea33e, 0xa8a9eb14, 0xd465ab2c, 0x346e2111, 0xe1c0fc01, 0x7c572579, 0x8d40f19, 0xef94c0d5 },
    { 0x1ec80fef, 0x360cbdd9, 0x54160fad, 0xab352b6b, 0x92b53576, 0xa88fea49, 0x47173b9d, 0x4300bf19 },
    { 0x5be7ea35, 0x19f04bc6, 0xcbeeaa03, 0x44fc90bb, 0x8e8462f6, 0xebd89056, 0xdae805d, 0x414ff9e4 },
    { 0x58f09911, 0x6eae4e65, 0x813fc86, 0x98df7f5c, 0xd5002864, 0x9f853991, 0xe3fb545f, 0x4ddb7bb8 },
    { 0xb0f9e4b9, 0xb29790b6, 0x33bcc04f, 0xd860cb0f, 0x823d8d1a, 0x4cc1a1c1, 0x413c1606, 0xcc9a8e2c },
    { 0x146a778c, 0x4670c2f, 0x91b00af4, 0x680dfa8b, 0xce349071, 0x7d58ba88, 0x9ddb5928, 0x366642be },
    { 0x574ef0ce, 0x8a597e24, 0xe5670b5c, 0xbcd14cf, 0xeefc983c, 0x7ecb2619, 0x11b23655, 0x79de5cac },
    { 0xd3d97e79, 0x9d8bf9f8, 0x5d909397, 0xb98c835d, 0x10a770c1, 0xaeff8645, 0x808c2d74, 0x260966d3 },
    { 0xb1aa6532, 0x88b31898, 0x7b974e78, 0x2cbbee0a, 0xb2be78cf, 0x8f494c12, 0x40fb93, 0x968c6d4b },
    { 0xfa50c0f6, 0x1d22e5f0, 0x7e3acebb, 0x1aa07b12, 0x8d001220, 0x9a28b977, 0x6d76a879, 0x3180eef9 },
    { 0x63964eee, 0x619074e0, 0x780140fe, 0x2e90836, 0xe72328d2, 0x448386d4, 0x59c5be23, 0x187f5048 },
    { 0x5a3ce25b, 0x4d15b7e2, 0x2d1469dd, 0xf0fc9f75, 0xafd7f12a, 0xd3cbda31, 0xf814ba1e, 0xbadb2a65 },
    { 0x5ce605af, 0x98f93eda, 0x6910be34, 0xf0de41ff, 0x85dbcb6e, 0x69a8fa00, 0x16a73375, 0x4a9f44d0 },
    { 0xda1d61d0, 0xca721a11, 0xb1a5bf6b, 0x7d88e842, 0x1a288ab5, 0xd5bba522, 0xe53d32b, 0x5f067ec2 },
    { 0x9c7be00b, 0x4ef4c444, 0xdf85d5f6, 0x1dc1283a, 0x23605483, 0xe1f8e934, 0xb3c210d2, 0x2cd3c369 },
    { 0xfcd83f4, 0x2825263b, 0xb55664b2, 0x38ccc491, 0x74dd06a7, 0x541178e, 0x76bcd92d, 0x7bb8c9e3 },
    { 0x7175407f, 0x1b58f010, 0xd4cda4c6, 0x2511e59d, 0xb7edcf28, 0xf5476d99, 0x5cf39944, 0xb26b64f1 },
    { 0xa8e282ff, 0xc970690, 0x7215ff98, 0xe8fd4166, 0x15311de0, 0x446f1e06, 0x2a73b061, 0xd064e13 },
    { 0xcac6f2e7, 0xe27faecb, 0xcb876f80, 0x5ea66e63, 0xefbe9eaa, 0x753d67c1, 0xc15eb9ea, 0x7f7653a1 },
    { 0xe6dfde46, 0xee37d206, 0xefbc5932, 0xe58e4325, 0x4ab76729, 0x4238cb11, 0xcc9f4ab0, 0x8624003d },
    { 0x3c4e089c, 0xd9a6823d, 0x66a40cfc, 0x7ac96082, 0xe250e314, 0x9cf211d3, 0xb0e11035, 0x48dce109 },
    { 0x174a53b9, 0xc9a28587, 0x2d39e56e, 0x6913cab1, 0x5d59b1fa, 0x512508c0, 0x22f382de, 0x8319497c },
    { 0x20e6e2e7, 0x96946bb6, 0x30c7071e, 0xf1b92ea3, 0xd53d280e, 0xe450111, 0x5f5da36f, 0x840dd273 },
    { 0x8e0ca824, 0xd7a351db, 0xa80280a0, 0x7e71db70, 0x35ae6813, 0x6cc24ca3, 0xe7b54f30, 0x1a077674 },
    { 0xf7bb50da, 0x51c982d1, 0xc5fa6355, 0x3e3d66c1, 0xafdb5821, 0xa321b4af, 0xe96afc5e, 0xa8192441 },
    { 0x95939698, 0x1943785c, 0x3d3e57ed, 0xf5018cdb, 0xe039e730, 0xe4918b3d, 0x884fdff0, 0x9475b7ba },
    { 0xcbee1405, 0xff0da7de, 0xafe32ca7, 0xdd73d95e, 0xd702226b, 0x391747c7, 0x7275a94, 0xbc8f53b },
    { 0xadd5bad2, 0x8faaf5ac, 0xdd580bfa, 0xba252e0, 0x3de3beae, 0xfbd71b9c, 0xf377c88b, 0x14b311dd },
    { 0x53f2432b, 0xa8171714, 0x3fa9df3d, 0xff41ced2, 0x4a29b314, 0xbc5a8c96, 0xf5f6400a, 0xd7c0979 },
    { 0xd2a63a50, 0xae401e56, 0xd645a115, 0x3b109a8f, 0xcca0a43d, 0x561fba2d, 0xbb51340c, 0x9d82b151 },
    { 0xbaf183a7, 0x6100525e, 0x23bc7202, 0x33725f9, 0x22b9cd6b, 0x36c41349, 0x7c6c4bac, 0xca72da5f },
    { 0xf7aef8a7, 0xe3844023, 0x8f933290, 0x6e48f6fd, 0x5adbd02d, 0x56b76a5f, 0xfa5aca58, 0xc56c3943 },
    { 0xdfb547cb, 0x10019036, 0xc5a2e29f, 0xdddbb1f, 0x7af2fa25, 0xa3c7a78c, 0x1fac9457, 0x11924459 },
    { 0x64587e23, 0x35471eb8, 0x90ee7896, 0xd7cfdc86, 0x6bacbdbd, 0x3839317b, 0x3436f9b4, 0x5617e073 },
    { 0xb866d6b1, 0x42df940f, 0x2cf28b54, 0xc92f0c12, 0x94e0b6a2, 0x2a91f2ef, 0x44bcd88c, 0x4384480d },
    { 0xec2bb890, 0x85de819e, 0xc4d9d164, 0x6102ba87, 0xe2d52ae4, 0xed4fe455, 0xd229cda8, 0x1db20d6c },
    { 0x71c4a7e3, 0x89e296ce, 0xd39d75ef, 0x5e545905, 0xe5005064, 0xf50becf, 0x38a60ecb, 0x23b09d0f },
    { 0x8481bde0, 0xe4e4d885, 0xb3a546d3, 0xe549de04, 0x2f0aa6ce, 0xa250e7fd, 0x358d6c86, 0xdd45e458 },
    { 0x9629a450, 0xbd383a8b, 0x9fd43c6c, 0xd1d492bf, 0x392ed605, 0x299561dd, 0xe5443352, 0x6ce9f114 },
    { 0xb73b1c47, 0xef1e4688, 0xeb1730da, 0x7cc893df, 0x1477d747, 0xe187e183, 0x83d38d96, 0x26ca6cc3 },
    { 0xedfe16b2, 0xdb401803, 0x11f98920, 0x7a2fef7, 0xd05b2a3b, 0xb676899f, 0x9c6e2192, 0xd38f93e0 },
    { 0x13464a57, 0xa78102aa, 0x62b6979a, 0xe817f463, 0x7ffcfed3, 0xc4b1ce30, 0xbcd6303f, 0x6caf666b },
    { 0xeb3cf8f5, 0x32245362, 0xec05c88c, 0x85fe12d1, 0x9182be7d, 0xceabe577, 0xc75849c6, 0x65084ae },
    { 0xbdf1a67d, 0x92d9997, 0x4f7a60f2, 0x184519b2, 0xa576fcf9, 0x84a201d9, 0xf8e5bcbc, 0xc2e9a5d0 },
    { 0x68856a6e, 0xddc4ec29, 0xcd5be267, 0xb64483b4, 0x8c3b4196, 0x477da62a, 0xbde5fc17, 0x3b27e771 },
    { 0xbc4a9df5, 0xb713fe2e, 0x9aef430b, 0xcc1dc97a, 0xcd9cced, 0xe2f28588, 0xcada3a0d, 0x2d83f366 },
    { 0xda433d5e, 0x11ceccc0, 0xabc5c762, 0x6ce7bab4, 0x2e89b221, 0xf785c409, 0x282de545, 0xf3fceb19 },
    { 0x31e8e1e, 0xe9e8c7ec, 0x1c1c1169, 0x81c16efd, 0xbcc4838a, 0x72207e06, 0x54de275c, 0x5acf692a },
    { 0xa9878607, 0xa88d6115, 0x5d3e00d8, 0x62657f73, 0xe9c9bf36, 0x3fc7a915, 0x92bbd7ff, 0x81f488b6 },
    { 0x8c28a97b, 0xf8298bc0, 0xd23d8c74, 0x9452a32e, 0x694b65e3, 0xa9472a3, 0x954ab30f, 0xe5324caa },
    { 0xab1ac187, 0x2a38a2f1, 0x96bed5a6, 0x47f0da2, 0xc8130fe8, 0xde49fc4d, 0x5dfb201f, 0x7611d8e2 },
    { 0x2564fe9b, 0x5beef82d, 0x3703a607, 0x253f31ef, 0x8ea1b365, 0x772df434, 0x226aee64, 0x2651b3fa },
    { 0xff3d6136, 0xffac5b0c, 0xbfc6c5c0, 0xc30dc01a, 0x7ea3d56c, 0x20bd3103, 0xb178e3d3, 0xae180068 },
    { 0x8ea9666, 0x139527a8, 0xc1dd94ce, 0x4f071fd2, 0x3c8b350c, 0x5a4bb337, 0x48c4ba11, 0x1faccae0 },
    { 0xc25f6371, 0x76220cd9, 0xf3a66df3, 0x15559d82, 0x63cf2a23, 0xa4ab5ab9, 0xa293131d, 0xa190b632 },
    { 0x2a9e8dfe, 0x3cce6bab, 0x3e82d82a, 0x5688544c, 0xc7b55dc, 0x31978b4d, 0xe2ccb3b7, 0xd466d561 },
    { 0xb23790a4, 0x2be63e1b, 0x251ad6c9, 0x4fdef072, 0x71ec0aad, 0xa31db6c3, 0xe8bd3204, 0x3f8be384 }
};
__constant unsigned int gy[256][8] = { 
    { 0x483ada77, 0x26a3c465, 0x5da4fbfc, 0xe1108a8, 0xfd17b448, 0xa6855419, 0x9c47d08f, 0xfb10d4b8 },
    { 0x1ae168fe, 0xa63dc339, 0xa3c58419, 0x466ceaee, 0xf7f63265, 0x3266d0e1, 0x236431a9, 0x50cfe52a },
    { 0x51ed993e, 0xa0d455b7, 0x5642e209, 0x8ea51448, 0xd967ae33, 0xbfbdfe40, 0xcfe97bdc, 0x47739922 },
    { 0x5c4da8a7, 0x41539949, 0x293d082a, 0x132d13b4, 0xc2e213d6, 0xba5b7617, 0xb5da2cb7, 0x6cbde904 },
    { 0xf7e35073, 0x99e59592, 0x9db99f34, 0xf5793710, 0x1296891e, 0x44d23f0b, 0xe1f32cce, 0x69616821 },
    { 0x95038d9d, 0xae3d5c3, 0xb3d6dec9, 0xe9838065, 0x1f760cc3, 0x64ed8196, 0x5b3ff1f, 0x24106ab9 },
    { 0x5cb3866f, 0xc3300373, 0x7ad928a0, 0xba5392e4, 0xc522fc54, 0x811e2f78, 0x4dc37efe, 0x66831d9f },
    { 0x5d9d1162, 0x3a236c55, 0x3f6619d8, 0x9832098c, 0x55df16c3, 0xe8f8b681, 0x8491067a, 0x73cc2f1a },
    { 0x11f8a809, 0x8557dfe4, 0x5e8256e8, 0x30b60ace, 0x62d613ac, 0x2f7b17be, 0xd31b6eaf, 0xf6e26caf },
    { 0x35e531b3, 0x8368c082, 0xa4af8bda, 0xfdeec2c1, 0x588e09b2, 0x15d37a10, 0xa2f8fb20, 0xb33887f4 },
    { 0x513378d9, 0xff94f8d3, 0xd6c420bd, 0x13981df8, 0xcd50fd0f, 0xbd0cb5af, 0xabb3e66f, 0x2750026d },
    { 0x28438267, 0x79379e2e, 0x794bb994, 0x38a22656, 0x79eb1e99, 0x96c56e7b, 0x70330666, 0xf7b83103 },
    { 0xd3506e0d, 0x9e3c79eb, 0xa4ef97a5, 0x1ff71f5e, 0xacb5955a, 0xdd24345c, 0x6efa6ffe, 0xe9fed695 },
    { 0xb91ae00f, 0xe1e1d970, 0xa1179f7b, 0xbaf6b3c7, 0x720d8ec3, 0x524f009e, 0xd1236e6d, 0x8b548a34 },
    { 0x696911c, 0x478eaffb, 0xb90d48db, 0xff065952, 0xf0700089, 0x96daca4c, 0xa9a111d4, 0x2108e9d0 },
    { 0x529911b0, 0x16631e72, 0x943ef9f7, 0x39c0f457, 0x1de90cdb, 0x424742ac, 0xb2bf8f68, 0xa78dd66d },
    { 0x4e273ad, 0xfc732221, 0x953b4453, 0x97f33631, 0x45b9a890, 0x8199ecb, 0x62003c7f, 0x3bee9de9 },
    { 0xc1f792d3, 0x20be8a0f, 0x7fbcb753, 0xce56e69c, 0xc652ead7, 0xe43eb1ad, 0x72c4f3fd, 0xc68fe020 },
    { 0x40e9f612, 0xfeefbc79, 0xb8bf83d6, 0x9361b3e2, 0x2001e757, 0x6ed1ef90, 0xb12b534d, 0xf0b254b9 },
    { 0x95be8325, 0x2b2fa6d0, 0x3dec2842, 0xc16047e8, 0x1af18ca8, 0x9cf736a9, 0x43ce95fa, 0x6d46967a },
    { 0x4aad0a6f, 0x68d308b4, 0xb3fbd781, 0x3ab0da04, 0xf9e33654, 0x6162ee56, 0xb3eff0c6, 0x5fd4fd36 },
    { 0x221a9fc7, 0xbc2345bd, 0xbf3dad7f, 0x5a7ea680, 0x49d93925, 0x763ddab1, 0x63f9fa6e, 0xa07bf42f },
    { 0xcc09b5e9, 0xe9ecb57, 0xfc2e02c6, 0xec2fb13d, 0x9c32b286, 0xb85e2e2e, 0x8981dfd9, 0xab155070 },
    { 0x945bb2b2, 0xafeee3b9, 0xb6f9dd28, 0x4f863e85, 0xf54a840, 0xf4752d53, 0x64130627, 0xc3811c80 },
    { 0x96e867b5, 0x595cc498, 0xa9211374, 0x88824d6e, 0x2660a065, 0x37794948, 0x1dc069d, 0x9eb39f5f },
    { 0xd712db0b, 0xd1b48518, 0x893627c9, 0x28de03ec, 0x689b6d2a, 0xe5e9974a, 0xb07ab442, 0x74b02f9e },
    { 0xd87c6fa9, 0x4ee093b4, 0xd4f75ce2, 0x4c33be22, 0x6a118243, 0x717b8d8d, 0xe6122793, 0x7704ab11 },
    { 0xb5201fd9, 0x92f96280, 0xfd792195, 0x5019e3a, 0x7e5d3c60, 0xa0e39b2b, 0xc2e2c8db, 0xf18661f4 },
    { 0x5d9a8ca3, 0x970ef0f2, 0x69ee7eda, 0xf178089d, 0x9ae4cdc3, 0xa711f712, 0xddfd4fda, 0xe1de8999 },
    { 0x936af53b, 0x238eeee4, 0x8f3e5fa7, 0x9915ecc, 0xf0451032, 0xdb939c00, 0x93ace318, 0x7d493fc5 },
    { 0xecb4530, 0xd8af9be7, 0xb0154c1f, 0xfe477123, 0x464e3244, 0xa7a2d4c6, 0xad9fd233, 0xa8913797 },
    { 0xf44ccfeb, 0x4beda419, 0x5772d93a, 0xebb405e8, 0xa41f2b40, 0xd1e3ec65, 0x2c726eee, 0xfe91f92d },
    { 0xcdd9e131, 0x92a00b77, 0x2ec8f330, 0xc090666, 0xb7ff4a18, 0xff5195ac, 0xfbd5cd6, 0x2bc65a09 },
    { 0xfb4dbd04, 0x4f432034, 0xffd2172c, 0xb9dc966c, 0x60de6bf5, 0x156511aa, 0x736ac5a3, 0x5d72fa98 },
    { 0x6ca27a9d, 0xc5e06218, 0x16fa11d9, 0xb4bccd53, 0x1dde1389, 0xac542613, 0x90a45dd, 0xd949b095 },
    { 0xf2affe01, 0x45070c11, 0x4cc43603, 0x804c2581, 0xc88376aa, 0x6e1a969a, 0x9f8d961a, 0x6946f6d6 },
    { 0x9d706192, 0x8940405e, 0x6bb6a417, 0x6597535a, 0xf292dd41, 0x9e1ced79, 0xa44f18f2, 0x9456a00d },
    { 0xa67a92ec, 0x62962df, 0xb0e5f6a7, 0xa40eee90, 0xc37ef134, 0x4915609a, 0xbd5861b9, 0xbe001fd3 },
    { 0x1153188f, 0x5101f0c6, 0x3e56692c, 0xe0d8c27e, 0x6fe9e0ee, 0x9212b5e5, 0x34e050c5, 0x7ca04c44 },
    { 0xd9592fe2, 0xbfb30fcf, 0xbea4f3ce, 0xaac10cb2, 0xf00a60dd, 0xb1595597, 0x7ec3c69c, 0xf75f5956 },
    { 0xe57c6b6c, 0x97dce1ba, 0xb06e4e12, 0xbf3ecd5c, 0x981c8957, 0xcc41442d, 0x3155debf, 0x18090088 },
    { 0x6a0d5b8f, 0x18e0d255, 0xcb6d8255, 0x82d972cc, 0xcb7df5f1, 0x19c7293a, 0x3e72851f, 0x48302cea },
    { 0xeb42415b, 0x95dc880d, 0xd2555734, 0x5bc95b8d, 0xf2445d00, 0xc3363e7d, 0xf8649a72, 0xd35d420e },
    { 0x69303894, 0x1695122d, 0x57a937a3, 0xf71e29c9, 0x10d10835, 0x46f3835, 0xa2397fec, 0xfe86fec2 },
    { 0x9bacaa35, 0x481642bc, 0x41f463f7, 0xec9780e5, 0xdec7adc5, 0x8f740a1, 0x7e9ea8e2, 0x7a68be1d },
    { 0x16c3540e, 0x8a51892e, 0x7fdcfd59, 0xe838299d, 0xcc384a0, 0x9fc0535f, 0x60be10f8, 0x338eb623 },
    { 0x6008391f, 0xa991961d, 0xcecb9337, 0xb1b758bd, 0xa4ad0120, 0x6d5bd127, 0xe0db419d, 0xdb191c19 },
    { 0x24d9c605, 0xd959efea, 0xf5a44180, 0xc0372a6e, 0x394f8ac5, 0x3e905765, 0x27df01a7, 0x8d3b6bc7 },
    { 0x5bc087d0, 0xbc80106d, 0x88c9ecca, 0xc20d3c1c, 0x13999981, 0xe1443469, 0x9dcb096b, 0x22771c8 },
    { 0x3038f1cb, 0x8ab20dc3, 0xcc55fc52, 0xe1bb8698, 0xbdb93c5d, 0x9f4d7ea6, 0x67c5df2e, 0x77ebcdb7 },
    { 0x6b9f4e62, 0xbe5a052b, 0xf6218916, 0xdf7101a, 0xa5bf61bf, 0x3ed7e40a, 0x678430af, 0xdd2ecc82 },
    { 0x469f955d, 0x2afa6171, 0x9530c542, 0x4f1c3368, 0x48cf925d, 0x43bb8eaf, 0x30487d0c, 0x87fa243f },
    { 0x10b7770b, 0x2a3da4b3, 0x94031042, 0xca95145, 0x79e88e2e, 0x47fd68b3, 0xea10047e, 0x8460372a },
    { 0xa58a0185, 0x640abf87, 0xf9464036, 0x248d52bc, 0xaa6560ef, 0xbc889b70, 0x2bc503cc, 0xcb8d7418 },
    { 0x171165b6, 0x4fcd4f99, 0x16032c06, 0xf806f729, 0x3828d663, 0xe54321, 0x7875bea9, 0x8daf734a },
    { 0x6f8e8619, 0x3464956a, 0xf1598aef, 0xd509b09a, 0x93af9214, 0x8f846756, 0x99be48, 0x161bbc1a },
    { 0x283bebc3, 0xe8ea23f5, 0x6701de19, 0xe9ebf457, 0x6b304eec, 0x2086dc8c, 0xc0458fe5, 0x542e5453 },
    { 0x1bcd4e81, 0x7de73a0f, 0xaf2c5715, 0xb367cee7, 0xe657ca74, 0x48321bf6, 0xd15b20b5, 0x20aaa102 },
    { 0xf3e12881, 0x1012a34d, 0x58e846a7, 0x19d01769, 0x16d2cb31, 0xb8b7ab54, 0x49dbca3b, 0x58ba68f3 },
    { 0xda8b4d98, 0x7cc9ac9b, 0x27b87635, 0x59b136fa, 0x36969c84, 0xfdef9e11, 0x635c4222, 0x8e8f0ef1 },
    { 0x7c80c68e, 0x603059ba, 0x69b8e2a3, 0xe45c4d4, 0x7ea4dd2f, 0x5c281002, 0xd8689060, 0x3a842160 },
    { 0x19e993c9, 0x707302f9, 0x62ab0ace, 0x589ff0e9, 0x8d921155, 0x1472f728, 0x2334cb7a, 0x4eee38bc },
    { 0xfa059469, 0x2d21eed7, 0xa506bb55, 0xb435ba18, 0xe1637502, 0x35da2be2, 0x369d8a12, 0x883ea257 },
    { 0x87d6065b, 0x87a2d430, 0xe1ad5e25, 0x96f0af24, 0x17adc6e1, 0x38318c6f, 0x767fbf8b, 0x682bfc8 },
    { 0x56e70797, 0xe9664ef5, 0xbfb019bc, 0x4ddaf9b7, 0x2805f63e, 0xa2873af6, 0x24f3a2e9, 0x6c28b2a0 },
    { 0xebed3bb4, 0x715bf437, 0xd31f6f2d, 0xc3ee36ba, 0x1d4afb4e, 0x72678b3a, 0xd8e0a8b9, 0xf26470c },
    { 0x8a9db02d, 0xbb271359, 0xd6c979e2, 0xd1c3dc17, 0x946252d, 0xcc740228, 0x5cdb728, 0xc77b7805 },
    { 0x5d3aa458, 0x34e7f491, 0xe457d099, 0x49ac877f, 0xe2a065e3, 0x508a824e, 0x7a8d7258, 0xe03c9727 },
    { 0x7c481b9b, 0x5b43b2eb, 0x6374049b, 0xfa62c2e5, 0xe77f17fc, 0xc5298f44, 0xc8e3094f, 0x790313a6 },
    { 0xd5715cb0, 0x9c8b2ddb, 0x462ae3dd, 0x32d54355, 0xae3d277, 0xbfdd28dd, 0xd71c7f6e, 0xcfe86e76 },
    { 0x748a324e, 0xe2df8ee1, 0x5a7189c8, 0xdddad3b2, 0xf800569f, 0x628cb225, 0x3d16aa, 0x410644c1 },
    { 0x2ba954d8, 0x28522235, 0xc8dc6f45, 0xe25fd7ba, 0x47bf772d, 0x50b015a2, 0xc4a48cd8, 0x39ccb000 },
    { 0x53a56285, 0x6dcb6646, 0xdc6b74c5, 0xd1c3418c, 0x6d4dff08, 0xc97cd2be, 0xd4cb7f88, 0xd8c8e589 },
    { 0xf513ea4c, 0x5800a688, 0x62bc893d, 0x2d688422, 0xdebe398f, 0x653d6731, 0x8c3d401f, 0x5ef705a },
    { 0x4397827d, 0x45b1a167, 0x8c3d6767, 0x53141fc5, 0xbcfb8535, 0x63731c3e, 0x82277ed4, 0xd14cf97e },
    { 0xabe5d4c0, 0x9a21598c, 0x35326b9b, 0x9cf54a11, 0x242e0d74, 0x8dce3da6, 0x1d7b636, 0x1f272124 },
    { 0xbc2da82b, 0x6fa5b571, 0xa7f09049, 0x776a1ef7, 0xecd29223, 0x8051c198, 0xc1a84e95, 0xb2b4ae17 },
    { 0x58948b53, 0x665c6690, 0x586b5365, 0x31efc7bc, 0x94b0a020, 0x33c4d5a6, 0x2079816f, 0xc7d1dd70 },
    { 0xeadb0ba9, 0xae2cbe59, 0x2cedd29b, 0x716a9d48, 0x5297b688, 0xd706349a, 0x49c61f2a, 0xd6b29f50 },
    { 0x4bf81736, 0x2fe783ba, 0xc8dce4ce, 0xf73f5d47, 0x41a17776, 0x7b7873ad, 0xd5920bff, 0xb0d9685f },
    { 0x4571534b, 0xaa94d3b5, 0xf9f98d09, 0xfb990bdd, 0xbd5f5b03, 0xec481f10, 0xe0e5dc84, 0x1d755bda },
    { 0x98fe5f5, 0xe5608555, 0x421726fe, 0x99bf43d2, 0x5b60dcfe, 0x790900ac, 0xb855c5ce, 0x2f7adb4c },
    { 0x82d0e64c, 0xae81f84b, 0xb9e2f10f, 0x24f6f6b6, 0x899a16ad, 0x590f4ddd, 0x73a377ac, 0x4bedc264 },
    { 0x32e8e534, 0x29cca856, 0xd3dc11ad, 0xf0582d1d, 0x21d42963, 0xcbcca854, 0x46a2fcae, 0x200102d },
    { 0x7a908974, 0xbce18cfe, 0x12a27bb2, 0xad5a488c, 0xd7484a77, 0x87104870, 0xb27034f9, 0x4eee31dd },
    { 0x49630dbe, 0x79359b42, 0x45bf103b, 0xf2b11799, 0xac19f696, 0xb7f21376, 0xe1720620, 0x7d210988 },
    { 0x28eaa8c8, 0x9d5063c4, 0x940ef5c6, 0xd21c13aa, 0x6206f1c4, 0xddc9a07c, 0xca7bcd6b, 0xbd3b5406 },
    { 0x7f02ae94, 0xb94701ea, 0xda30fcdb, 0x875f6d78, 0x90f9b13, 0xe4acc51a, 0xcfddab5f, 0x8ee96a4e },
    { 0x4b6dad0b, 0x5ae46250, 0x7013ad06, 0x245ba190, 0xbb4850f5, 0xf36a7eed, 0xdff2c275, 0x34b458f2 },
    { 0x4ffcf60f, 0x837f468f, 0x2bb959fa, 0x1d4c2ad3, 0xa3deaceb, 0x26fe324c, 0x555d7b3d, 0x5fc2d4ef },
    { 0xe0f7f24, 0xd44c75b8, 0x4a292287, 0x570ded99, 0x498badfb, 0xffe1bc99, 0xaf873009, 0x9686b8e2 },
    { 0xaab84786, 0x9d583c14, 0xda150307, 0xa3719a17, 0xe413959f, 0xb3848771, 0xc128419f, 0x73bc4415 },
    { 0x17749c76, 0x6c9d0b18, 0xe16fd09f, 0x6def681b, 0x530b9614, 0xbff7dd33, 0xe0b39418, 0x17dcaae6 },
    { 0x43ae2cda, 0xb5b334f0, 0xbb457983, 0x36358bfa, 0xe4e51bc0, 0xf932b212, 0x9aebda, 0xd814ab2b },
    { 0xb833d68f, 0x66445d04, 0xf05adeb7, 0xb586cf78, 0x5e0e1488, 0xf7d36198, 0xd68acb5e, 0x707160e5 },
    { 0xb2d404ea, 0xb3524026, 0xb0996925, 0x5e1997b9, 0x75535070, 0xfebd7dfe, 0x9c9fd959, 0xb9203301 },
    { 0x6e0568db, 0x9b0b1329, 0x7cf674de, 0xccb6af93, 0x126b596b, 0x973f7b77, 0x701d3db7, 0xf23cb96f },
    { 0x3dbe9e9e, 0xfe8bfa19, 0xafa17612, 0x8b13911e, 0x9f23774, 0xfe4de98b, 0xff0e09f9, 0x3f3abfae },
    { 0x7fd02c51, 0x7dc82b45, 0x277a1254, 0x4f1c96f, 0xb89c940e, 0x93a7c296, 0x3c887405, 0x75056339 },
    { 0xc1a7dc13, 0x61662c2, 0xe3c4a3eb, 0xa2bf3fb0, 0xe148bac3, 0xbf39347, 0xafa31f19, 0x9da3ef84 },
    { 0xc90ddf8d, 0xee4e95cf, 0x577066d7, 0x681f0d3, 0x5e2a33d2, 0xb56d2032, 0xb4b1752d, 0x1901ac01 },
    { 0x9b884811, 0xe1f9a897, 0xfa9656dc, 0xbb6d3828, 0x3ecda73c, 0x6d353e8a, 0x58a4f19b, 0x473db9c0 },
    { 0x28e32b06, 0xa15ab466, 0xc3b4be68, 0xab181947, 0xef91d1c9, 0x3f0f1c0c, 0xa91532b, 0x6f321af2 },
    { 0x784096f, 0xe85d4b30, 0xaf9e7315, 0x3cb246df, 0xec362aea, 0x7ca0d435, 0xb8add060, 0x1751baea },
    { 0x893fb578, 0x951ad253, 0x7f718f2e, 0xacbfbbbb, 0x82314eef, 0x7880cfe9, 0x17e735d9, 0x699a84c3 },
    { 0xe61d0797, 0x8b6de2c3, 0xcea6d0a5, 0x1d2a4053, 0xf653a774, 0x6a5d64de, 0x316d18f3, 0x56f3511 },
    { 0x48ca9a8d, 0xf032937, 0x190e4867, 0x5b416c71, 0x18bb4995, 0x88f994a8, 0x1edee112, 0xe537ef9 },
    { 0xb84f5be, 0xe4357f5c, 0x7c937a0b, 0x4075b8ce, 0xcdbc43d1, 0x70d15b85, 0xfc4eff73, 0xac351065 },
    { 0xfebfaa38, 0xf2bc7eae, 0x728ec608, 0x18c340eb, 0x3428d63, 0x2bb067e1, 0x79363ed7, 0x5d7d991f },
    { 0x218da834, 0xf3c652cc, 0x67a1d191, 0xb5c5efa5, 0x7cf2b1f7, 0x8a2adfa8, 0xcd61eeef, 0xc671ddf1 },
    { 0x36dc19ad, 0x1cc0a3a7, 0xa945bb32, 0x1bceba6e, 0x6286fef8, 0xffc8765c, 0xd88a29e3, 0x6b8637a7 },
    { 0x408d02c0, 0x6e5c12c3, 0xfe470c7d, 0x3c857375, 0x5b9b929e, 0x90e7232b, 0x79ac67f0, 0xfccb9794 },
    { 0x2804dfa4, 0x4805a1e4, 0xd7c99cc9, 0x762808b0, 0x92cc584d, 0x95ff3b51, 0x1488e4e7, 0x4efdf6e7 },
    { 0xe4ba5c34, 0xe377669e, 0x72d8c66c, 0x95c50029, 0xdcc59936, 0xb4108a35, 0xc570491a, 0x13f9fc7d },
    { 0xbaca6207, 0x9be871d7, 0xfc3117a9, 0x6a13e99c, 0x38d137b0, 0xe369c043, 0xe6873fe3, 0x1bda78a3 },
    { 0x4d8ee2b6, 0xcfb20b89, 0x56de7473, 0x5a7927f2, 0x532576d8, 0xcfd74862, 0xe8f9be24, 0xa106cf01 },
    { 0xeed1de7f, 0x638e0077, 0x1e89768c, 0xa3ca9447, 0x2d155e80, 0xaf322ea9, 0xfcb4291b, 0x6ac9ec78 },
    { 0xa6c8b0d2, 0xcd5ee122, 0xaf8954dc, 0x9d4e2f02, 0xa21e4d42, 0x69c0a260, 0xb07bc069, 0xb88a3f4b },
    { 0x40a63eba, 0x61bef03d, 0x633c5ffa, 0xcc46d82a, 0xeb6c64c3, 0x183c2a47, 0xf6788b17, 0xf05e51 },
    { 0xea5e0891, 0xed11cb4, 0xd10bc2d, 0xf4eb9fa1, 0x24ac3c5a, 0x183383d0, 0xd803dad3, 0x3e9be5ed },
    { 0x7370f91c, 0xfb67e4f5, 0x81809fa, 0x25d40f9b, 0x1735dbf7, 0xc0a11a13, 0xc0d1a04, 0x1e177ea1 },
    { 0x310b26a6, 0xc804e209, 0xee1b5e3c, 0xfc79df05, 0xdf48a1a6, 0x9afa63f7, 0x84a5bfee, 0x883a45b3 },
    { 0x49644107, 0x516363b3, 0x65ed4b82, 0x311dd9e5, 0x380d8e54, 0x4b0ce637, 0x84d148aa, 0x46156294 },
    { 0x1955467a, 0x6c34f345, 0x3fb8ec7f, 0x94a6c992, 0x37427197, 0x345d4f05, 0x58ac8d1a, 0x464b8542 },
    { 0xe507a36, 0x20a38261, 0xaffdcbd9, 0x427222b8, 0x39aefabe, 0x1582894d, 0x991d4d48, 0xcb6ef150 },
    { 0x905b7508, 0x2adcfab3, 0x82a61a8b, 0x321ef95d, 0x889bee40, 0xaeee082c, 0x9a3bc539, 0x20721ec7 },
    { 0xa5a99b0a, 0xb053feb0, 0x9ae95dd2, 0xdbb31b40, 0xea67a5b2, 0x21f094b0, 0x7675676a, 0xf45a770a },
    { 0x58fe1d2d, 0xe84dc1d1, 0xcfcb7d18, 0x10e5a78a, 0xbf7593f4, 0x99f1e524, 0xcb932469, 0x87dd4a57 },
    { 0x662a9f2d, 0xba063986, 0xde1d90c2, 0xb6be215d, 0xbbea2cfe, 0x95510bfd, 0xf23cbf79, 0x501fff82 },
    { 0xcd32fc59, 0xa10dd135, 0xe723f210, 0x359ca6f0, 0x6e0f2d1a, 0x7df4d846, 0x6b90b662, 0x3aa781e },
    { 0xc1d68541, 0x3749b3c6, 0x5231df52, 0x4a722925, 0x684aacd9, 0x54b79f33, 0x4172c8fa, 0xdace0cf3 },
    { 0x670e1b54, 0x50b5e57b, 0x7a39be81, 0xf8d6737d, 0x3789e61a, 0xaff20bfc, 0x7f2713fd, 0xc7b2231 },
    { 0x1e63633a, 0xd0ef4f1c, 0x1661a6d0, 0xea02b728, 0x6cc7e74e, 0xc951d1c9, 0x822c3857, 0x6feb73bc },
    { 0x74c63502, 0x65bb629b, 0x6f9e2c57, 0x77c3c4a9, 0x1fdf3c81, 0xe4348575, 0x68033d46, 0x3d26b5b7 },
    { 0x4a1a200a, 0xb4dabd17, 0x562d4923, 0x38b5dfad, 0x41d45e4f, 0xad5f845, 0xb7da9642, 0x227c070c },
    { 0x7f09e610, 0xf33e3946, 0xe68095e0, 0x1068694c, 0x26c17ef6, 0x9ab92d7, 0x69a76ce6, 0xca5361fe },
    { 0xefa47267, 0xfea521a1, 0xa9dc343a, 0x3736c974, 0xc2fadafa, 0x81e36c54, 0xe7d2a4c6, 0x6702414b },
    { 0xebff8fbb, 0x79c61a6, 0x9868714d, 0x5deda927, 0xed959ca1, 0xa4f814f2, 0x68fa6139, 0x978a586b },
    { 0xb98ac5b7, 0x6702cb75, 0xe6b1d814, 0x7ec71b3b, 0x71c3b494, 0x963fa28a, 0x4877f484, 0x779ffe26 },
    { 0xecc8626e, 0xc1a41382, 0x1a192abf, 0x30f2ee2, 0xc33e8999, 0xbae942e5, 0x23e8f44e, 0xd136a95a },
    { 0x2a758e30, 0xfa7984b, 0x471b006a, 0x1aafbb18, 0xd0a6b2c0, 0x420e83e2, 0xe8a9421, 0xcf2cfd51 },
    { 0x19e83b8a, 0x22a6d81, 0x7bff9904, 0x64083915, 0x9b3b2a9c, 0x552f05f3, 0xcc9c239c, 0xd82239c },
    { 0x86486887, 0x23726595, 0xf9287aba, 0xf671aaf1, 0x8d7110ce, 0xc6770bfe, 0xfefde2b7, 0x5e786824 },
    { 0x79e5bd19, 0x26d3512c, 0xef7bc637, 0x34072d7, 0x7a8631af, 0x39caf1e6, 0xc9f64b45, 0x1de473 },
    { 0x67c876d, 0x6f3e06d, 0xe1dadf16, 0xe5661db3, 0xc4b3ae6d, 0x48e35b2f, 0xf30bf0b6, 0x1a71ba45 },
    { 0x4dc1e9b7, 0x861e3e04, 0xabb16a57, 0xd8feeef0, 0xe509dc46, 0xd9f0f549, 0x79d5bd96, 0x5a62a2d9 },
    { 0xf4bb3356, 0x78fb14d4, 0xd197d224, 0x6c02d004, 0x875d4182, 0x1bcaf0ae, 0x1f3f333c, 0x561b3297 },
    { 0xcd12d234, 0x62dd9636, 0x73735427, 0x501b0c07, 0x9a8d580b, 0x4c73c9d, 0xae1f822d, 0x1a01865d },
    { 0xdb8ba9ff, 0xf4b586d0, 0xc4b1f91, 0x77b0e28b, 0x5b0e7b8f, 0x7845295a, 0x294c8426, 0x6b133120 },
    { 0x2a413117, 0x14532799, 0xd7a6a75a, 0x74e30e4e, 0x16540659, 0x249ebca4, 0x268dae77, 0xeca052da },
    { 0x23ad0750, 0x43c59888, 0x94c6e44d, 0x61025ff6, 0x414ea9d9, 0xd1e22dd4, 0x6c859295, 0x75ded1c },
    { 0x9a67db10, 0x7174ca9d, 0x4b535893, 0xc5b6c1ea, 0x1a0d72e4, 0xc6e554e5, 0x597e5164, 0xea2a407b },
    { 0x648a3657, 0x74b61f2f, 0xf130c0c3, 0x5aec1f4f, 0x19213b0c, 0x7e332843, 0x967224af, 0x96ab7c84 },
    { 0xd7cd272b, 0x34209cb5, 0x695a2f02, 0xb6f3dbb8, 0x268a4abd, 0xae39ab09, 0x631e97b0, 0xf290b5e3 },
    { 0x8c43c25a, 0x96eebe80, 0x1696634a, 0xf145835b, 0x57131d75, 0x9111c6f, 0x5b7e9d2f, 0xae53a0fe },
    { 0x798ea094, 0xcff5c6f, 0xb8f43d8d, 0x90ed2c76, 0x86861d02, 0x4faed3ca, 0xdad44a8d, 0x2e68703 },
    { 0x35ec51, 0x92d8728, 0x50974c2, 0x3a1d85d4, 0xb5d506cd, 0xc2884901, 0x92ebac06, 0xcad10d5d },
    { 0x129fef5f, 0x1d030204, 0xa541ca37, 0x5859d20b, 0x52da9fac, 0xb49fab7d, 0xb63120d1, 0x7c1db9e0 },
    { 0xadefcbf8, 0x63f53ce3, 0x67d0d411, 0x5416cf59, 0x8b3b19c6, 0x14ec23ef, 0xed4e0c6a, 0x59852ddf },
    { 0xfbd76c23, 0xf28c3dc4, 0x45e5cb0e, 0x847a6e0b, 0x1e205e2c, 0x3ad13d95, 0x8c65363b, 0xcfecadbe },
    { 0xddb84f0f, 0x4a4ddd57, 0x584f044b, 0xf260e641, 0x905326f7, 0x6c64c8e6, 0xbe7e5e03, 0xd4fc599d },
    { 0x1ff891, 0x656c6fb5, 0xbddae240, 0xb82fc1ab, 0xe048a53c, 0x707b6651, 0x25348681, 0x88c7327e },
    { 0x46c983ce, 0xc6f5d1b, 0x4caf2b2b, 0x3bee2059, 0x6e09e603, 0xb5c27a73, 0xb2c01eb6, 0x8836267c },
    { 0xbd17d1b9, 0xd1c2415, 0x335a1d70, 0xc1947d2b, 0x5d6b5115, 0x537116df, 0xfa0c9171, 0x9287eaef },
    { 0x9a1af0b2, 0x6a6a4807, 0xadd9a2da, 0xf71df262, 0x465152bc, 0x3ee24c65, 0xe899be93, 0x2385a2a8 },
    { 0x444eb6d8, 0xcd97652f, 0xf0f25c9, 0xdd2b246b, 0xead780f5, 0xa1c6cf98, 0xe8c7f034, 0x947eb1ae },
    { 0xc571c73, 0x730abcf4, 0x7a91e832, 0xf1c89a2c, 0x9a80bcc0, 0x115fc45b, 0x3b6b79cc, 0xb5bf325a },
    { 0x68d2ef26, 0xc81c57c9, 0x647ce4d1, 0xfcb800ee, 0xd66e85a6, 0x8106bea7, 0x836889fa, 0x8c347793 },
    { 0x40a6bf20, 0xe76640b2, 0xc92b97af, 0xe58cd82c, 0x432e10a7, 0xf514d9f3, 0xee8be11a, 0xe1b28ec8 },
    { 0x6fedd12d, 0xdb925f3e, 0xa5fd3a21, 0x54c76122, 0x79605d18, 0x6030f512, 0x48f2769d, 0xca82c835 },
    { 0xa63d96b0, 0x57ada5e5, 0x2104a0b3, 0x34888e9a, 0x645a47c0, 0xfebc5aa2, 0xe04c0553, 0x9bbcabaa },
    { 0xe7e85938, 0x54e7daab, 0xf798170, 0xb24627ab, 0x6b8fecdf, 0xeb611388, 0x56aef52b, 0xa0887814 },
    { 0x34626d9a, 0xb5a5b22f, 0xf7098e12, 0xf2ff5800, 0x87b38411, 0xff24ac56, 0x3b513fc1, 0xfd9f43ac },
    { 0x12b8988c, 0x19169e2f, 0xdf42102a, 0x737cc1ca, 0x9cb5bf25, 0xeda98af3, 0x38e71089, 0xbaa89d98 },
    { 0x527aa15d, 0x504dcf4a, 0xe33600bc, 0x1c084ce2, 0x98f9c6a, 0x231c80bb, 0xb57c5cbd, 0x45a1c334 },
    { 0xbea81d48, 0x970a50be, 0xaf3f24fd, 0x602fbfc0, 0x443299a4, 0x2f43c9ec, 0x5e0199f6, 0x506998b5 },
    { 0xc2562100, 0x3d3f42a8, 0x27b78a13, 0x93a95ee, 0xac3d26ef, 0xa8a8d83f, 0xc5180e93, 0x5bcd091f },
    { 0xca7952d5, 0x227a1f69, 0x5c4baf4c, 0x43bb247, 0x1e488250, 0x6638df5c, 0x1016ae32, 0x156b049 },
    { 0x62c7d280, 0x1eb80e6a, 0x127258cd, 0xff088917, 0x41b2d18c, 0x15e0a24, 0xc334e076, 0x3b989c1d },
    { 0x1feb2f28, 0xf827237, 0x81860aec, 0x760215ba, 0x42344be8, 0xe09cbdb3, 0x7e347bd8, 0xe0d4c04f },
    { 0x1f036484, 0x13a38c0b, 0xe29d496e, 0x582cf566, 0x3e8751e9, 0x68773315, 0x82c237a2, 0x4eb1f962 },
    { 0xd03a981b, 0x2ff9eb3e, 0xf296661f, 0x9cae09cb, 0xa83fa5b4, 0x7be26b0a, 0xb6fff86f, 0xc338d3ff },
    { 0xc90d5b92, 0xdb7c3054, 0x2b415c9b, 0x9902cf28, 0xb3ec7805, 0xef490f24, 0x70e92e98, 0x339033a8 },
    { 0x8fe19714, 0xa348fdfe, 0x5473f70e, 0x858b7818, 0xbad37131, 0xeff37326, 0xed22343c, 0x50f3704d },
    { 0x493d13fe, 0xf524ba18, 0x8af4c4dc, 0x54d07936, 0xc7b7ed6f, 0xb90e2ceb, 0x2c951e01, 0xf0c29907 },
    { 0xa61b5be9, 0xaf66220a, 0xb9fa5339, 0xc7b5bc9d, 0x95db994, 0x12e3ed84, 0x56e726b0, 0x16c7a248 },
    { 0x55779a79, 0x96c59dab, 0x7c78329a, 0x8976f0ed, 0x4b3e75b, 0x46ee67ae, 0xb05f606a, 0x8452af25 },
    { 0xdcc7077, 0x65fdac7, 0xb850e3f1, 0x7efdc854, 0xaacad237, 0xb987134d, 0xbebf7beb, 0x9ff688de },
    { 0xc60f9c92, 0x3c727b0b, 0x71bef2c6, 0x7d1d1268, 0x7ff7a631, 0x86903166, 0xd605b68b, 0xaec293ec },
    { 0x4b6f85b1, 0x4f86acc4, 0x3f0cefb3, 0x73cc2e65, 0x4c42f0f9, 0x1a44816d, 0x6ba3d2bc, 0x8e57dbc5 },
    { 0x761f7568, 0x4f3cdc1b, 0x6437bb3a, 0x1445af1, 0x511b3596, 0x580477b8, 0x3b879075, 0xfaed07e9 },
    { 0xfb1e3336, 0x4c3fdee0, 0xe85eb416, 0x9c954b40, 0xb3946ce1, 0xbb5e35f3, 0x3d9bd0d3, 0x174d3307 },
    { 0xbe3279ed, 0x5bbbb03a, 0xc69a80f8, 0x9879aa5a, 0x1a6b965, 0xf13f7e59, 0xd47a5305, 0xba5ad93d },
    { 0x374e2d6d, 0xaee74e71, 0x3c774de0, 0x7c095ff6, 0xaad9c8f9, 0x870266cc, 0x61ae7975, 0xf05bbdda },
    { 0x415ecb95, 0x8aee9a29, 0xb2da2115, 0xb712183f, 0xb2a232fd, 0x16b3e01b, 0x822efdcd, 0x1e89c85d },
    { 0x8bb5d669, 0xf681e646, 0x9e8be1fd, 0x9132e65b, 0x543955c2, 0x7e3f2a4b, 0xad500590, 0xf34e4bbd },
    { 0x4d9f92e7, 0x16d1c735, 0x26fc99cc, 0xfb8ad34c, 0xe886eedf, 0xa8d8e4f1, 0x3a7f7131, 0xdeba9414 },
    { 0xe745ceb2, 0xb1871578, 0xb6fe7a5c, 0x1bc344cc, 0xfa2ab492, 0xd200e83f, 0xd0ad9086, 0x132c0911 },
    { 0x652cbd19, 0xaef6269c, 0xd2b196d1, 0x2461c95f, 0x7a02062e, 0xafd694e, 0xbb45670e, 0x7429337b },
    { 0xf9907a3b, 0x711c8a2f, 0xb23dd203, 0xb5fbe663, 0xf6074f26, 0x6113f543, 0xdeabe597, 0xaf452fe6 },
    { 0xaeefe937, 0x56b5340d, 0x2f3a4958, 0xa7abbf5e, 0x146e77f, 0x6295a07b, 0x671cdc1c, 0xc107cefd },
    { 0x32f32ec3, 0xf638e605, 0x477f890f, 0x655ab7fe, 0xe99c630, 0x2119a309, 0x4030b078, 0x47e0bdbb },
    { 0x7e07002a, 0xaffe111a, 0xd62ff76, 0x14638066, 0x507ee406, 0x2d174302, 0xbdec7358, 0x2e5b2d6e },
    { 0x49e82bf1, 0x843ade6d, 0x41cbb0b9, 0x6fde3f0, 0x3350cc02, 0xc171cee7, 0x6c2066c4, 0xdf3d0db4 },
    { 0xb318e0ec, 0x3354028a, 0xdd669827, 0xf9d4b287, 0xaaa971d, 0x2f7e5ed1, 0xd0b29748, 0x3d83efd0 },
    { 0x9b99930, 0x281f19c7, 0x3bd6ada0, 0x569b7845, 0x1a260a7b, 0xef10008c, 0xae59aea6, 0xc75a4805 },
    { 0x8ddbb463, 0x76bac95e, 0x6aaa8927, 0x5d403ad3, 0xb5e48711, 0xbe8dc4ee, 0xbddeb850, 0x833c2e52 },
    { 0x7ed6071c, 0x60810d71, 0x2684aa8e, 0x2d63a83b, 0x100a1d90, 0x9d623cc3, 0x83d9e62a, 0xe891ac51 },
    { 0x6b84c692, 0x2397eba9, 0xb72cd287, 0x2281a68a, 0x5e683293, 0xa57a213b, 0x38cd8d7d, 0x3f4f2811 },
    { 0x3b6cfb3a, 0x6b89cf41, 0xa39ff9b1, 0xc34bfbc9, 0x3d580b93, 0x4dde6c84, 0x383a284d, 0x89309df8 },
    { 0x8b34125b, 0x92e05f63, 0x873a6dbf, 0xbf3f99af, 0x3ee28bc3, 0xd825fe8e, 0xd8b170cf, 0x1d327f1d },
    { 0x4cddcf9b, 0xec226bfe, 0x7ba56bd0, 0x31c76c58, 0xab3cb1bf, 0xa32eccc6, 0xc0d05f34, 0x89d30105 },
    { 0x8157f55a, 0x7c99306c, 0x79c07661, 0x61c91e29, 0x66a73899, 0xd279b48a, 0x655fba0f, 0x1ad836f1 },
    { 0x9220c0de, 0x74b20d20, 0x52a26d45, 0x5ce40148, 0x3e31153a, 0x16769cbd, 0x29ee3feb, 0xa2329515 },
    { 0x6c0bc1cf, 0xeac5fbce, 0xd1d8232d, 0xe5fdb683, 0xadbeaecd, 0xf1627bf4, 0xe86d55fb, 0xdf4aa9ad },
    { 0x43b45543, 0x44e3d550, 0xf36d3401, 0x134cc86e, 0xb01fe8b7, 0x74471d2a, 0x426e7efa, 0xb24234d5 },
    { 0x7f97355b, 0x8db81c09, 0xabfb7f3c, 0x5b251588, 0x8b679a3e, 0x50dd6bd6, 0xcef7c731, 0x11f4cc0c },
    { 0xf7d416e5, 0xe2aa6f19, 0x4cdb65d9, 0xa42a3450, 0x81e83ae5, 0x688103a0, 0x68c10ad0, 0xfec5e556 },
    { 0x8727b3b7, 0xbe913949, 0x8f2f48f7, 0xb88f9220, 0x3b1ce5ea, 0x527fd7dd, 0x7548650e, 0x2216b93b },
    { 0x43fbbe66, 0x9fe191b4, 0x80757bca, 0x15764d37, 0x9579e142, 0xd97fe697, 0xe2bf6592, 0x3a19aeea },
    { 0xccc9dc37, 0xabfc9c16, 0x57b4155f, 0x2c47f9e6, 0x646b3a1d, 0x8cb98543, 0x83da13ac, 0x79afa73 },
    { 0xd3ad7afe, 0x4f1559e4, 0x4a0ba1ad, 0x97874655, 0x811ec979, 0x3da8693c, 0xc07cfd15, 0xbb46b593 },
    { 0x4ec5607, 0x59192d41, 0xdc569d24, 0xda62cf57, 0xcff60419, 0xd2f91029, 0xb84cbec, 0x12b7ed98 },
    { 0x93cc3be3, 0x334a526, 0x311bc63b, 0xdde6485d, 0xb1cfdc1f, 0xbbc4c74b, 0xbc640ea1, 0xd45165ae },
    { 0x2e7e5528, 0x88c331dd, 0x8ba0386a, 0x4b9cd684, 0x9c653f64, 0xc8709385, 0xe9b8abf8, 0x7524f2fd },
    { 0xf6211f4f, 0x4e75f902, 0xb51f3e68, 0x9b8294cf, 0xd9ff4f6, 0x8126f728, 0x2922e6b2, 0x78c87f45 },
    { 0xe9c43cf4, 0xda3dc3a5, 0x974e434f, 0x8359814f, 0x52d4e1e7, 0x669b9b89, 0x2f982f3, 0x49d6c38d },
    { 0xbd52effb, 0xc1f079b7, 0xccd4e3e0, 0x911b07de, 0x4bd5a4f5, 0xc9e8b845, 0xf9f7e90c, 0x537b36a2 },
    { 0xe82d86fb, 0x6443fcb7, 0x565aee58, 0xb2948220, 0xa70f750a, 0xf484ca52, 0xd4142174, 0xdcf89405 },
    { 0xdeac9fbe, 0x9ccb4d33, 0x5688bd58, 0xdd69b1d1, 0x8e2336c5, 0xca739361, 0x377ce628, 0xa8f2a0cf },
    { 0x4e3b0b44, 0xd5ffda79, 0x7c442bbd, 0xc3ab3fcf, 0xeec30184, 0xa8dcd003, 0x431f627f, 0xacf442f1 },
    { 0x9accd2a9, 0xba0f4708, 0x8b8389ce, 0x9dc864cc, 0x22af0930, 0xe5c031dc, 0xfa205e0d, 0xcc65fd9e },
    { 0xd99fcdd5, 0xbf6902e2, 0xae96dd64, 0x47c299a1, 0x85b90a39, 0x133aeab3, 0x58299e5e, 0x9faf6589 },
    { 0x1914b0b3, 0x426aeb70, 0x89a278d7, 0xea9ad7ac, 0x24e52280, 0x4b1d86d6, 0xe659b47, 0xc4cafa8 },
    { 0xccecc176, 0x61e013a1, 0x332f66f0, 0x650940c6, 0x33a2364b, 0xe87efa98, 0xa0e99c4d, 0x629cf4a0 },
    { 0x1313fadb, 0x737af3ba, 0xaf3e0a2, 0x92f810aa, 0x786f2b08, 0x4a62ffc7, 0x637b1f01, 0x720ddb62 },
    { 0x38ee7b8c, 0xba5404dd, 0x84a25bf3, 0x9cecb2ca, 0x900a79c4, 0x2b262e55, 0x6d64b1b5, 0x9779057e },
    { 0xbf439b28, 0xc5fb6d7, 0x576befd2, 0x20cef64d, 0xb925593e, 0x5c56af8d, 0xca3972c4, 0xa24aa391 },
    { 0x584315cb, 0x294922a9, 0xa57d64b, 0xbcc80509, 0x7322a252, 0x9757f5a, 0xfac35d76, 0xa54fdba3 },
    { 0xee6902f1, 0xfca5db36, 0x94d74faa, 0x4b05d0d2, 0x5b3d5100, 0xc46e227e, 0x3d01793d, 0xe29405ad },
    { 0x69be1590, 0x4614580, 0xef7e4334, 0x53ccb0ca, 0x48f300a8, 0x1d0942e1, 0x3f495a90, 0x7f6ecc27 },
    { 0xc833c782, 0x22d9d700, 0x43fe63dc, 0xefdca4a1, 0xf52b45c5, 0xe7dbd2a6, 0x6f67c1ff, 0xf96b9480 },
    { 0x4095902b, 0xab65a1aa, 0xa80be54a, 0x86bf7baa, 0xa6280b61, 0xe5626461, 0xcdb4f701, 0x8562ff7b },
    { 0x77a33df1, 0x4f79a1fb, 0x13b6fd49, 0xc19f7b4a, 0x331d22f2, 0x93b0733a, 0x6118d62a, 0x7bbdab6 },
    { 0xd3a81ca, 0x6e785c06, 0x383937ad, 0xf4b798ca, 0xa6e8a9fb, 0xfa547b16, 0xd758d666, 0x581f33c1 },
    { 0xe498dbd3, 0x21a81030, 0x1debbdc4, 0xaf95e521, 0x8e77fc2d, 0x9227b277, 0x684e7120, 0xa6f5cc64 },
    { 0xad7e7f5b, 0x465b353d, 0xd9d09702, 0x90d6743b, 0x70649827, 0xc5bf73b0, 0x9cc2a84e, 0xb16f667a },
    { 0xd181a1ab, 0xd58895d6, 0x1c063e7c, 0x82157c22, 0x39d0f019, 0x64ad5c6d, 0x495a7bbb, 0x31dab1d },
    { 0x40a30463, 0xa3305193, 0x378fedf3, 0x1f7cc0eb, 0x7ae784f0, 0x451cb945, 0x9e71dc73, 0xcbef9482 },
    { 0x13f4a37a, 0x324d17a1, 0xe9aa5f39, 0xdb6a42b6, 0xf7ef93d3, 0x3e1e545f, 0x1a581f3, 0xc429d15b },
    { 0x8ad9f7a6, 0x6783890, 0x95fa14ae, 0x1203925f, 0x14f37dab, 0x6b79816e, 0xdb82e6a3, 0x1e5122d },
    { 0x133239be, 0x84e4000e, 0x40d0372c, 0xdd96adc1, 0x547676f2, 0x4001f5e6, 0x70a6bb6e, 0x188c6077 },
    { 0x620efabb, 0xc8ee2782, 0xe24e7c0c, 0xfb95c5d7, 0x35b783be, 0x9cf0f8e9, 0x55af34a3, 0xe62b945 },
    { 0x53154fed, 0xe94d2873, 0x98904990, 0x3809d798, 0xa9f04ff, 0x9e027a1d, 0x6eebf3d6, 0xfc9590cf },
    { 0x1dfeda5, 0xc16e651f, 0xbac7b5ad, 0x608b96cf, 0x5e01eaec, 0x17a02182, 0xf96ccf52, 0x52e76373 },
    { 0xfc6b6949, 0x19d55edb, 0xe8d50f88, 0xaa81f945, 0x17f004f4, 0x149ecb58, 0xd10a473d, 0xeb19880e }
};

void generatePubKey(__private const unsigned int k[8],__private unsigned int x[8],__private unsigned int y[8]) {

    x[0] = 0xFFFFFFFF;
    x[1] = 0xFFFFFFFF;
    x[2] = 0xFFFFFFFF;
    x[3] = 0xFFFFFFFF;
    x[4] = 0xFFFFFFFF;
    x[5] = 0xFFFFFFFF;
    x[6] = 0xFFFFFFFF;
    x[7] = 0xFFFFFFFF;

    y[0] = 0xFFFFFFFF;
    y[1] = 0xFFFFFFFF;
    y[2] = 0xFFFFFFFF;
    y[3] = 0xFFFFFFFF;
    y[4] = 0xFFFFFFFF;
    y[5] = 0xFFFFFFFF;
    y[6] = 0xFFFFFFFF;
    y[7] = 0xFFFFFFFF;
    
    __private unsigned int px[8];
    __private unsigned int py[8];

	for(int i = 255; i >= 0; i--) {
		if(k[i / 32] >> abs((i - 255) % 32) & 1 ) {
            px[0] = gx[255-i][0];
            px[1] = gx[255-i][1];
            px[2] = gx[255-i][2];
            px[3] = gx[255-i][3];
            px[4] = gx[255-i][4];
            px[5] = gx[255-i][5];
            px[6] = gx[255-i][6];
            px[7] = gx[255-i][7];

            py[0] = gy[255-i][0];
            py[1] = gy[255-i][1];
            py[2] = gy[255-i][2];
            py[3] = gy[255-i][3];
            py[4] = gy[255-i][4];
            py[5] = gy[255-i][5];
            py[6] = gy[255-i][6];
            py[7] = gy[255-i][7];
            addPoints(x, y, px, py);
        }
    }
}

#endif
